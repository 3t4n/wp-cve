<?php

namespace S2WPImporter\Plugins;

use S2WPImporter\Traits\AjaxTrait;

/**
 * Installer
 *
 * @package S2WPImporter\Plugins
 */
class Installer
{
    use AjaxTrait;

    public function init()
    {
        add_action('wp_ajax_s2wp_install_plugin', [$this, 'installPlugin']);
        add_action('wp_ajax_s2wp_activate_plugins', [$this, 'activatePlugins']);
    }

    /**
     * The single plugin installer handler.
     */
    public function installPlugin()
    {
        // Here may be some unwanted messages, generated by some plugins...
        // Catch them, so it does not break our JSON result.
        ob_start();

        $request_body = file_get_contents('php://input');

        if (false === $request_body) {
            $this->error('Failed to read the AJAX data');
        }

        $data = json_decode($request_body, true);

        if (empty($data['nonce']) || !wp_verify_nonce($data['nonce'], 's2wp')) {
            $this->error('Failed to verify the nonce.');
        }

        if (empty($data['slug'])) {
            $this->success('Invalid slug.');
        }

        $slug = $data['slug'];

        $plugin = new Plugin($slug);

        $plugin->setIsActiveCallback(PluginCheckCallbacks::getCallback($slug));

        if (!$plugin->isInstalled()) {
            $plugin->install();
        }

        // This may be empty or contain something unexpected.
        ob_get_clean();

        if ($plugin->isInstalled()) {
            $this->success('Done! Plugin installed..');
        }
        else {
            $this->error('Plugin failed to install.');
        }
    }

    public function activatePlugins()
    {
        $errors = [];

        // Here may be some unwanted messages, generated by some plugins...
        // Catch them, so it does not break our JSON result.
        ob_start();

        $request_body = file_get_contents('php://input');

        if (false === $request_body) {
            $this->error('Failed to read the AJAX data');
        }

        $data = json_decode($request_body, true);

        if (empty($data['nonce']) || !wp_verify_nonce($data['nonce'], 's2wp')) {
            $this->error('Failed to verify the nonce.');
        }

        if (empty($data['slugs'])) {
            $this->success('Invalid slugs.');
        }

        $slugs = $data['slugs'];

        foreach ($slugs as $slug) {
            $plugin = new Plugin($slug);

            $plugin->setIsActiveCallback(PluginCheckCallbacks::getCallback($slug));

            if ($plugin->isActive()) {
                continue;
            }

            $activated = $plugin->activate();

            if (!$activated) {
                $errors[] = 'Plugin failed to activate (' . $slug . ').';
            }
        }

        // This may be empty or contain something unexpected.
        ob_get_clean();

        if (!empty($errors)) {
            $this->error('Some plugins were not activated.');
        }

        $this->success('All plugins activated.');
    }
}
