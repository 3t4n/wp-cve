<?php
/**
 * Its pos order-item model
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package VitePos_Lite\Libs
 */

namespace VitePos_Lite\Libs;

/**
 * Class Pos Order Item
 *
 * @package VitePos_Lite\Libs
 */
class POS_Order_Item {
	/**
	 * Its property product_name
	 *
	 * @var string
	 */
	public $product_name;
	/**
	 * Its property product_id
	 *
	 * @var int
	 */
	public $product_id;
	/**
	 * Its property variation_id
	 *
	 * @var int
	 */
	public $variation_id;
	/**
	 * Its property quantity
	 *
	 * @var int
	 */
	public $quantity = 0;
	/**
	 * Its property description
	 *
	 * @var string
	 */
	public $description = '';
	/**
	 * Its property image
	 *
	 * @var string
	 */
	public $image = '';
	/**
	 * Its property price
	 *
	 * @var float
	 */
	public $price = 0.0;
	/**
	 * Its property regular_price
	 *
	 * @var float
	 */
	public $regular_price = 0.0;
	/**
	 * Its property tax_amount
	 *
	 * @var float
	 */
	public $tax_amount = 0.0;

	/**
	 * The GetProductItem is generated by appsbd
	 *
	 * @param any $item Its string.
	 * @param any $order Its string.
	 *
	 * @return POS_Order_Item
	 */
	public static function get_product_item( $item, &$order ) {
		$product               = $item->get_product();
		$o_item                = new POS_Order_Item();
		$o_item->product_name  = $product->get_name( '' );
		$o_item->product_id    = $item->get_product_id();
		$o_item->variation_id  = $item->get_variation_id();
		$o_item->image         = self::get_wc_product_image( $product );
		$o_item->quantity      = $item->get_quantity();
		$o_item->price         = (float) $order->get_item_subtotal( $item, false, true );
		$o_item->regular_price = (float) $item->get_meta( '_vtp_regular_price' );
		$o_item->tax_amount    = (float) $item->get_total_tax();
		if ( ! empty( $o_item->variation_id ) ) {
			$variations = vitepos_get_product_variation_attributes( $o_item->variation_id );
			foreach ( $variations as $vkey => $variation ) {
				$o_item->description .= '<span>' . wc_attribute_label( $vkey ) . ' : <b>' . $product->get_attribute( $vkey ) . '</b></span>';
			}
		}
		return $o_item;
	}

	/**
	 * The get item meta data is generated by appsbd
	 *
	 * @param mixed  $item Its order item.
	 * @param null   $product Its Order product.
	 * @param string $hideprefix Its hide prefix.
	 *
	 * @return array
	 */
	public static function get_item_meta_data( $item, &$product = null, $hideprefix = '_' ) {
		if ( empty( $product ) ) {
			$product = is_callable( array( $item, 'get_product' ) ) ? $item->get_product() : false;
		}
		$meta_data         = $item->get_meta_data();
		$hideprefix_length = ! empty( $hideprefix ) ? strlen( $hideprefix ) : 0;
		$meta_response     = array();
		foreach ( $meta_data as $meta ) {
			if ( empty( $meta->id ) || '' === $meta->value || ! is_scalar( $meta->value ) || ( $hideprefix_length && substr(
				$meta->key,
				0,
				$hideprefix_length
			) === $hideprefix ) ) {
				continue;
			}
			$itemmeta                = new \stdClass();
			$attribute_key           = str_replace( 'attribute_', '', $meta->key );
			$itemmeta->display_key   = wc_attribute_label( $attribute_key, $product );
			$itemmeta->display_value = wp_kses_post( $meta->value );
			if ( taxonomy_exists( $attribute_key ) ) {
				$term = get_term_by( 'slug', $meta->value, $attribute_key );
				if ( ! is_wp_error( $term ) && is_object( $term ) && $term->name ) {
					$itemmeta->display_value = $term->name;
				}
			}
			$meta_response[] = $itemmeta;
		}
		return $meta_response;
	}

	/**
	 * The get wc product image is generated by appsbd
	 *
	 * @param any    $product Its string.
	 * @param string $size Its string.
	 *
	 * @return false|string Its string.
	 */
	private static function get_wc_product_image( $product, $size = 'woocommerce_thumbnail' ) {
		 $image = '';
		if ( $product->get_image_id() ) {
			$image = wp_get_attachment_image_url( $product->get_image_id(), $size );
		} elseif ( $product->get_parent_id() ) {
			$parent_product = wc_get_product( $product->get_parent_id() );
			if ( $parent_product ) {
				$image = wp_get_attachment_image_url( $parent_product->get_image_id(), $size );
			}
		} else {
			$image = wc_placeholder_img_src( $size );

		}
		return $image;
	}
}
