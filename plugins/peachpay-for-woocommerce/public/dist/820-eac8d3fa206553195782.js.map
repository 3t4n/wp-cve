{"version":3,"file":"820-eac8d3fa206553195782.js","mappings":"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","sources":["webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/button.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/afterpay.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/applepay.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/square.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/card.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/googlepay.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/achBank.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/square/cashapp.ts"],"sourcesContent":["import {DefaultCart} from '../../reducers/cartReducer';\nimport {formatCurrencyString} from '../../util/currency';\nimport {getLocaleText} from '../../util/translation';\nimport {$qsAll, isMobile} from '../../../../@shared/ts/dom';\nimport {type LoadingMode, type ModalPage} from '../../models/IEnvironment';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {type SquareGateway} from '../../models/square';\nimport {Environment} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\n\nexport function setupSquareButtonRendering(gateways: Record<string, SquareGateway>) {\n\tstore.subscribe(() => {\n\t\trenderSquareButtonDisplay(\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.page(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t\tPaymentConfiguration.gatewayConfig(PaymentConfiguration.selectedGateway()),\n\t\t);\n\n\t\trenderSquareButtonLoading(\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t\tPaymentConfiguration.gatewayConfig(PaymentConfiguration.selectedGateway()),\n\t\t);\n\n\t\tcontrolSquareCustomButtonMounts(gateways);\n\t});\n}\n\nfunction controlSquareCustomButtonMounts(gateways: Record<string, SquareGateway>) {\n\tif (!PaymentConfiguration.selectedGateway().startsWith('peachpay_square_')) {\n\t\treturn;\n\t}\n\n\t// Sorting the gateways makes sure the last active gateway is always detached before the new gateway is\n\t// attached because they share containers.\n\tfor (const [_, gateway] of Object.entries(gateways).sort(([_, m1], [__, m2]) => (m2.state?.mountTarget?.length ?? 0) - (m1.state?.mountTarget.length ?? 0))) {\n\t\tif (!gateway.state) {\n\t\t\tgateway.state = {\n\t\t\t\tmountTarget: '',\n\t\t\t};\n\t\t}\n\n\t\tconst newMountTarget = customButtonMountTarget();\n\n\t\t// Unmount custom button if already mounted and if the mount target has changed\n\t\tif (gateway.state.mountTarget && gateway.state.mountTarget !== newMountTarget) {\n\t\t\tgateway?.detach?.();\n\t\t\tgateway.state.mountTarget = '';\n\t\t}\n\n\t\tif (PaymentConfiguration.selectedGateway() === gateway.config.gatewayId) {\n\t\t\tif (gateway.state.mountTarget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tgateway?.attach?.(newMountTarget);\n\n\t\t\tgateway.state.mountTarget = newMountTarget;\n\t\t} else {\n\t\t\tif (!gateway.state.mountTarget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tgateway?.detach?.();\n\n\t\t\tgateway.state.mountTarget = '';\n\t\t}\n\t}\n}\n\n/**\n * Renders the square button display state.\n */\nfunction renderSquareButtonDisplay(gatewayId: string, page: ModalPage, loadingMode: LoadingMode, config: GatewayConfiguration | null) {\n\t// show/hide Square button containers\n\tif (gatewayId.startsWith('peachpay_square_') && page === 'payment') {\n\t\t$qsAll('.square-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.square-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/Hide the custom square button container\n\tif (loadingMode === 'finished' && config?.hasCustomButton) {\n\t\t$qsAll('.square-custom-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.square-custom-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Hide/show the non custom square buttons\n\tif (loadingMode === 'loading' || config?.hasCustomButton) {\n\t\t$qsAll('.square-btn', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.square-btn', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t}\n}\n\n/**\n * Renders the square loading spinners elements based on store state.\n */\nfunction renderSquareButtonLoading(mode: LoadingMode, config: GatewayConfiguration | null) {\n\t// Show/hide the external spinner\n\tif (mode === 'loading' || (mode === 'processing' && config?.hasCustomButton)) {\n\t\t$qsAll('.square-spinner-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.square-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide the internal spinner\n\tif (mode === 'processing') {\n\t\t$qsAll('.square-btn-spinner', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.square-btn-spinner', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide processing message\n\tif (mode === 'processing') {\n\t\t$qsAll('.square-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = getLocaleText('Processing');\n\t\t});\n\t} else {\n\t\t$qsAll('.square-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = `${getLocaleText('Pay')} ${formatCurrencyString(DefaultCart.total())}`;\n\t\t});\n\t}\n\n\t// Enable/disable the square non custom buttons while loading\n\tif (mode === 'finished') {\n\t\t$qsAll<HTMLInputElement>('.square-btn', $element => {\n\t\t\t$element.disabled = false;\n\t\t});\n\t} else {\n\t\t$qsAll<HTMLInputElement>('.square-btn', $element => {\n\t\t\t$element.disabled = true;\n\t\t});\n\t}\n}\n\nfunction customButtonMountTarget(): string {\n\tif (isMobile()) {\n\t\treturn '#mobile-customer-pay-button .square-custom-btn-container';\n\t}\n\n\treturn '#pay-button .square-custom-btn-container';\n}\n","import {type SquareGateway, type ProcessedTokenResult} from '../../models/square';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {handleTokenResult} from './square';\nimport {$qsAll} from '../../../../@shared/ts/dom';\nimport {type AfterpayClearpay, PaymentMethodAlreadyDestroyedError, PaymentMethodUnsupportedError, PaymentMethodNotAttachedError, type Payments} from '@square/web-payments-sdk-types';\nimport afterpayImageURL from '../../../img/marks/afterpay.svg';\nimport {PeachPayCustomer} from '../../reducers/peachPayCustomerReducer';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {GatewayEligibility, type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {render} from '../../reducers/rootReducer';\nimport {type PaymentRequest} from '@square/web-payments-sdk-types';\nimport {debounce} from '../../util/debounce';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {type TransactionUpdate} from '../../../../@shared/ts/transaction';\n\nfunction initSquareAfterpayMethod(): SquareGateway {\n\tlet afterpay: AfterpayClearpay | null = null;\n\tlet buttonInstanceWaitingInterval: NodeJS.Timer | undefined;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: getLocaleTitle(),\n\t\tgatewayId: 'peachpay_square_afterpay',\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\ttitle: {src: afterpayImageURL},\n\t\t\tbadge: {src: afterpayImageURL},\n\t\t},\n\t\thasCustomButton: true,\n\t};\n\n\tstore.subscribe(() => {\n\t\tconfig.name = getLocaleTitle();\n\t\t$qsAll('.pp-pm-type[data-gateway=\"peachpay_square_afterpay\"]', $element => {\n\t\t\tconst $title = $element.querySelector('span');\n\t\t\tif ($title) {\n\t\t\t\t$title.innerText = config.name;\n\t\t\t}\n\t\t});\n\t\t// Don't worry about re-rendering pp-pm-more options, it is already re-rendered\n\t\t// on billing country update event.\n\t});\n\n\tconst debouncedActivate = debounce((async (payments: Payments, paymentRequest: PaymentRequest) => {\n\t\tif (afterpay) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (PaymentConfiguration.eligibleGateway(config.gatewayId) !== GatewayEligibility.Eligible) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tafterpay = await payments.afterpayClearpay(paymentRequest);\n\n\t\t\tconfig.initialized = true;\n\t\t\tstore.dispatch(render());\n\t\t} catch (error: unknown) {\n\t\t\tconfig.initialized = false;\n\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\tconfig.browser = false;\n\t\t\t}\n\n\t\t\tstore.dispatch(render());\n\n\t\t\tconsole.error('Square Afterpay/Clearpay activation error:');\n\t\t\tconsole.error(error);\n\t\t\tcaptureSentryException(error as Error);\n\t\t}\n\t}) satisfies SquareGateway['activate']);\n\n\treturn {\n\t\tconfig,\n\t\tactivate: debouncedActivate,\n\t\treset() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\tconst oldInstance = afterpay;\n\t\t\tafterpay = null;\n\n\t\t\toldInstance?.destroy()?.catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\t\tattach(selector: string) {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tbuttonInstanceWaitingInterval = setInterval(() => {\n\t\t\t\tif (afterpay) {\n\t\t\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\t\t\tafterpay.attach(selector, {\n\t\t\t\t\t\tbuttonColor: 'black',\n\t\t\t\t\t\tbuttonType: 'checkout_with_afterpay',\n\t\t\t\t\t\tfinalCtaButtonType: 'buy_now',\n\t\t\t\t\t})?.catch(error => {\n\t\t\t\t\t\tconfig.initialized = false;\n\t\t\t\t\t\tstore.dispatch(render());\n\n\t\t\t\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\tcaptureSentryException(error as Error, {selector});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t},\n\t\tdetach() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\tafterpay?.detach()?.catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodNotAttachedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\tafterpay = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\n\t\tasync tokenize(): Promise<ProcessedTokenResult> {\n\t\t\ttry {\n\t\t\t\tif (!afterpay) {\n\t\t\t\t\treturn [null, null, {\n\t\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\t\tnote: 'Failure processing Afterpay/Clearpay payment.',\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tconst result = await afterpay.tokenize();\n\t\t\t\treturn handleTokenResult(result);\n\t\t\t} catch (error: unknown) {\n\t\t\t\tconst update: TransactionUpdate = {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'An unknown exception occured while tokenizing the payment.',\n\t\t\t\t};\n\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tupdate.note = error.message;\n\t\t\t\t}\n\n\t\t\t\treturn [null, null, update];\n\t\t\t}\n\t\t},\n\t};\n}\n\nfunction getLocaleTitle() {\n\tconst title = Feature.metadata<string>(FeatureFlag.SQUARE_AFTERPAY, 'title');\n\tif (title && !(title === 'Afterpay' || title === 'Clearpay')) {\n\t\treturn title;\n\t}\n\n\tconst country = PeachPayCustomer.billing.country();\n\n\tswitch (country) {\n\t\tcase 'GB':\n\t\tcase 'ES':\n\t\tcase 'FR':\n\t\tcase 'IT': {\n\t\t\treturn 'Clearpay';\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn 'Afterpay';\n\t\t}\n\t}\n}\n\nfunction getDescription(): string {\n\tconst title = getLocaleTitle();\n\treturn /* html */ `\n<img style=\"display: block; text-align: left; height: 1.5rem; \" src=${afterpayImageURL}>\n<p style=\"text-align: left; margin: 0.5rem 0;\">${title} ${getLocaleText('selected for checkout.')}</p>\n<hr/>\n<p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${getLocaleText('Another step will appear after submitting your order to complete your purchase details.')}<p>`;\n}\n\nexport {initSquareAfterpayMethod};\n","import {PaymentMethodAlreadyDestroyedError, type ApplePay, type Payments, PaymentMethodUnsupportedError} from '@square/web-payments-sdk-types';\nimport {$qs} from '../../../../@shared/ts/dom';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {handleTokenResult} from './square';\nimport {type SquareGateway, type ProcessedTokenResult} from '../../models/square';\nimport applepayBadgeURL from '../../../img/badge/apple-pay.svg';\nimport applepayImageURL from '../../../img/marks/apple-pay.svg';\nimport applepayButtonURL from '../../../img/apple-pay-button.png';\nimport {GatewayEligibility, type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {type PaymentRequest} from '@square/web-payments-sdk-types';\nimport {debounce} from '../../util/debounce';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {type TransactionUpdate} from '../../../../@shared/ts/transaction';\n\n// https://developer.squareup.com/reference/sdks/web/payments/digital-wallets/apple-pay\nfunction initSquareApplePayMethod(): SquareGateway {\n\tlet apay: ApplePay | null = null;\n\tlet buttonInstanceWaitingInterval: NodeJS.Timer | undefined;\n\n\tconst $applePayButton = getButton();\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.SQUARE_APPLEPAY_GATEWAY, 'title') ?? getLocaleText('Apple Pay'),\n\t\tgatewayId: 'peachpay_square_applepay',\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\tbadge: {src: applepayBadgeURL},\n\t\t\ttitle: {src: applepayImageURL},\n\t\t},\n\t\tbrowser: (window as any)['ApplePaySession'] !== undefined,\n\t\thasCustomButton: true,\n\t};\n\n\tconst debouncedActivate = debounce((async (payments: Payments, paymentRequest: PaymentRequest) => {\n\t\tif (apay) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (PaymentConfiguration.eligibleGateway(config.gatewayId) !== GatewayEligibility.Eligible) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tapay = await payments.applePay(paymentRequest);\n\n\t\t\tconfig.initialized = true;\n\t\t\tstore.dispatch(render());\n\t\t} catch (error: unknown) {\n\t\t\tconfig.initialized = false;\n\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\tconfig.browser = false;\n\t\t\t}\n\n\t\t\tstore.dispatch(render());\n\n\t\t\tconsole.error(error);\n\t\t\tcaptureSentryException(error as Error, {\n\t\t\t\tpaymentRequest,\n\t\t\t});\n\t\t}\n\t}) satisfies SquareGateway['activate']);\n\n\treturn {\n\t\tconfig,\n\t\tactivate: debouncedActivate,\n\t\treset() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\tconst oldInstance = apay;\n\t\t\tapay = null;\n\n\t\t\toldInstance?.destroy()?.catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\t\tattach(selector: string) {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tbuttonInstanceWaitingInterval = setInterval(() => {\n\t\t\t\tif (apay) {\n\t\t\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\t\t\t$qs(selector, $el => $el.insertAdjacentElement('afterbegin', $applePayButton));\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t},\n\t\tdetach() {\n\t\t\t$applePayButton.remove();\n\t\t},\n\t\tasync tokenize(): Promise<ProcessedTokenResult> {\n\t\t\ttry {\n\t\t\t\tif (!apay) {\n\t\t\t\t\treturn [null, null, {\n\t\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\t\tnote: 'Failed to find Apple Pay instance while attempting to tokenize the payment.',\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tconst result = await apay.tokenize();\n\t\t\t\treturn handleTokenResult(result);\n\t\t\t} catch (error: unknown) {\n\t\t\t\tconst update: TransactionUpdate = {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'An unknown exception occured while tokenizing the payment.',\n\t\t\t\t};\n\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tupdate.note = error.message;\n\t\t\t\t}\n\n\t\t\t\treturn [null, null, update];\n\t\t\t}\n\t\t},\n\t};\n}\n\nfunction getDescription(): string {\n\treturn /* html */ `\n<img style=\"display: block; text-align: left; height: 1.5rem; \" src=\"${applepayImageURL}\">\n<p style=\"text-align: left; margin: 0.5rem 0;\">${getLocaleText('Apple Pay selected for checkout.')}</p>\n<hr/>\n<p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${getLocaleText('Another step will appear after submitting your order to complete your purchase details.')}<p>`;\n}\n\nfunction getButton(): HTMLButtonElement {\n\tconst $temp = document.createElement('div');\n\n\t$temp.innerHTML = /* html */ `<button class=\"square-apay-btn\">\n        <style>\n            .square-apay-btn{\n                background-image: url(${applepayButtonURL});\n                background-color: black;\n                border: none; height: 55px;\n                width: 15rem;\n                background-size: contain;\n                border-radius: 0.2rem;\n                background-position: center;\n            }\n\n            .square-apay-btn:hover{\n                opacity: 0.8;\n            }\n        </style>\n    </button>`;\n\n\treturn $temp.querySelector('button')!;\n}\n\nexport {initSquareApplePayMethod};\n","import {DefaultCart} from '../../reducers/cartReducer';\nimport {Environment, Feature, startModalProcessing, stopModalLoading} from '../../reducers/environmentReducer';\nimport {MerchantConfiguration} from '../../reducers/merchantConfigurationReducer';\nimport {PaymentConfiguration, registerGatewayBatch} from '../../reducers/paymentConfigurationReducer';\nimport {PeachPayCustomer} from '../../reducers/peachPayCustomerReducer';\nimport {store} from '../../store';\nimport {cartItemQuantity} from '../../util/cart';\nimport {getLocaleText} from '../../util/translation';\nimport {setupSquareButtonRendering} from './button';\nimport {type PaymentRequestOptions, type LineItem, type TokenResult, type StoreVerifyBuyerDetails, type ChargeVerifyBuyerDetails, type BillingContact, type Payments} from '@square/web-payments-sdk-types';\nimport {loadScript, $qsAll} from '../../../../@shared/ts/dom';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {type SquareGateway, type ProcessedTokenResult} from '../../models/square';\nimport {initSquareACHDebitMethod} from './achBank';\nimport {initSquareAfterpayMethod} from './afterpay';\nimport {initSquareCashAppMethod} from './cashapp';\nimport {initSquareApplePayMethod} from './applepay';\nimport {initSquareCardMethod} from './card';\nimport {initSquareGooglePayMethod} from './googlepay';\nimport {displayPaymentErrorMessage, type OrderService} from '../order';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {getErrorString} from '../../../../@shared/ts/error';\nimport {PeachPayOrder} from '../../reducers/peachPayOrderReducer';\n\nexport default async function initSquarePaymentIntegration(orderService: OrderService) {\n\tconst applicationId = Feature.metadata<string>(FeatureFlag.SQUARE_GATEWAYS, 'application_id');\n\tconst locationId = Feature.metadata<string>(FeatureFlag.SQUARE_GATEWAYS, 'location_id');\n\tconst scriptSrc = Feature.metadata<string>(FeatureFlag.SQUARE_GATEWAYS, 'script_src');\n\n\tif (!applicationId || !locationId || !scriptSrc) {\n\t\treturn;\n\t}\n\n\tawait loadScript(scriptSrc, 'Square');\n\n\tif (!window.Square) {\n\t\treturn;\n\t}\n\n\tconst payments = window.Square.payments(applicationId, locationId);\n\tconst squareMethods = registerSquareGateways();\n\n\tsetupSquareButtonRendering(squareMethods);\n\n\tconst confirm = async (event: MouseEvent) => {\n\t\tif (!await PeachPayOrder.reportValidity()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst $target = event.target as HTMLElement | null;\n\t\tconst $button = $target?.closest<HTMLButtonElement>('button');\n\t\tif (!$button) {\n\t\t\t// cashapp places button in Shadow DOM element so this must be checked as well\n\t\t\tif (!$target?.closest('div')?.shadowRoot?.querySelector('button')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst gateway = squareMethods[PaymentConfiguration.selectedGateway()];\n\t\tif (!gateway) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait squarePaymentFlow(payments, gateway, orderService);\n\t};\n\n\t$qsAll('.square-btn', $button => {\n\t\t$button.addEventListener('click', confirm);\n\t});\n\t$qsAll('.square-custom-btn-container', $paymentRequest => {\n\t\t$paymentRequest.addEventListener('click', confirm);\n\t});\n\n\tlet previousState = '';\n\tstore.subscribe(() => {\n\t\tconst data = squarePaymentRequestOptions();\n\t\tconst currentState = JSON.stringify(data);\n\n\t\tif (previousState === currentState || Environment.modalUI.loadingMode() !== 'finished') {\n\t\t\treturn;\n\t\t}\n\n\t\tpreviousState = currentState;\n\n\t\tfor (const [_, gateway] of Object.entries(squareMethods)) {\n\t\t\tgateway?.reset?.();\n\t\t\tgateway.state = undefined;\n\t\t\tgateway.activate(payments, payments.paymentRequest(data));\n\t\t}\n\t});\n}\n\nfunction registerSquareGateways(): Record<string, SquareGateway> {\n\tconst gatewayImplementations: Record<string, SquareGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tif (Feature.enabled(FeatureFlag.SQUARE_CARD_GATEWAY)) {\n\t\tconst method = initSquareCardMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.SQUARE_CARD_GATEWAY)) {\n\t\tconst method = initSquareGooglePayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.SQUARE_APPLEPAY_GATEWAY)) {\n\t\tconst method = initSquareApplePayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.SQUARE_ACH)) {\n\t\tconst method = initSquareACHDebitMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.SQUARE_AFTERPAY)) {\n\t\tconst method = initSquareAfterpayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.SQUARE_CASHAPP)) {\n\t\tconst method = initSquareCashAppMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n\nasync function squarePaymentFlow(payments: Payments, gateway: SquareGateway, orderService: OrderService) {\n\tconst isCashapp = gateway.config.gatewayId === 'peachpay_square_cashapp';\n\n\tif (!(gateway.config.gatewayId === 'peachpay_square_cashapp')) {\n\t\t// cashapp popup happens in the iframe HTML within a shadow-dom, not in a separate page, so detecting when it is closed is unreliable\n\t\t// however users can not interact with the express checkout when it is open so setting it to loading is unnecessary\n\t\t// and is difficult to stop loading reliably when it is closed.\n\t\tstore.dispatch(startModalProcessing());\n\t}\n\n\tconst [sourceId, verificationId, transactionUpdate] = await gateway.tokenize(payments);\n\n\tif (isCashapp) {\n\t\t// Once the cashapp modal has closed, we don't want to allow user to interact with the peachpay modal.\n\t\tstore.dispatch(startModalProcessing());\n\t}\n\n\tconst {error: transactionError, result: transaction} = await orderService.startTransaction(gateway.config.gatewayId);\n\tif (transactionError || !transaction) {\n\t\tconst errorMessage = transactionError ? getErrorString(transactionError) : getLocaleText('An unknown error occured while starting the transaction. Please refresh the page and try again.');\n\t\tdisplayPaymentErrorMessage(errorMessage);\n\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tif (!sourceId) {\n\t\tdisplayPaymentErrorMessage(transactionUpdate.note);\n\n\t\tawait transaction.complete(transactionUpdate);\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tconst extraFormData: Record<string, string> = {\n\t\tpeachpay_square_source_id: sourceId,\n\t};\n\n\tif (verificationId) {\n\t\textraFormData['peachpay_square_verification_id'] = verificationId;\n\t}\n\n\tconst {error: orderError, result: orderResult} = await orderService.placeOrder(transaction, extraFormData);\n\tif (orderError || !orderResult || orderResult.result !== 'success') {\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tif (window.top) {\n\t\tawait transaction.complete();\n\t\twindow.top.location = orderResult.redirect;\n\t}\n}\n\nfunction squarePaymentRequestOptions(): PaymentRequestOptions {\n\tconst paymentRequestOptions: PaymentRequestOptions = {\n\t\tcountryCode: MerchantConfiguration.general.wcLocationInfoData()?.store_country ?? 'US',\n\t\tcurrencyCode: MerchantConfiguration.currency.code(),\n\t\tlineItems: squarePaymentRequestLineItems(),\n\t\tdiscounts: squarePaymentRequestDiscountOptions(),\n\t\ttaxLineItems: [{\n\t\t\tlabel: getLocaleText('Tax'),\n\t\t\tamount: (DefaultCart.totalTax()).toFixed(2),\n\t\t}],\n\t\ttotal: {\n\t\t\tlabel: getLocaleText('Total'),\n\t\t\tamount: DefaultCart.total().toFixed(2),\n\t\t},\n\t};\n\n\treturn paymentRequestOptions;\n}\n\nfunction squarePaymentRequestLineItems(): LineItem[] {\n\tconst lineItems = new Array<LineItem>();\n\n\tfor (const cartItem of DefaultCart.contents()) {\n\t\tlineItems.push({\n\t\t\tlabel: cartItem.name + ' × ' + cartItemQuantity(cartItem),\n\t\t\tamount: (Number.parseFloat(cartItem.display_price ?? cartItem.price) * cartItemQuantity(cartItem)).toFixed(2),\n\t\t});\n\t}\n\n\treturn lineItems;\n}\n\nfunction squarePaymentRequestDiscountOptions(): LineItem[] {\n\tconst discounts = new Array<LineItem>();\n\n\tfor (const [coupon, amount] of Object.entries(DefaultCart.couponRecord())) {\n\t\tif (!amount) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdiscounts.push({\n\t\t\tid: coupon,\n\t\t\tamount: (amount).toFixed(2),\n\t\t\tlabel: coupon,\n\t\t});\n\t}\n\n\treturn discounts;\n}\n\nexport function createVerifyBuyerDetails(): StoreVerifyBuyerDetails | ChargeVerifyBuyerDetails {\n\tconst billingContact: BillingContact = {\n\t\taddressLines: [PeachPayCustomer.billing.address1(), PeachPayCustomer.billing.address2()],\n\t\tcity: PeachPayCustomer.billing.city(),\n\t\tcountryCode: PeachPayCustomer.billing.country(),\n\t\temail: PeachPayCustomer.billing.email(),\n\t\tfamilyName: PeachPayCustomer.billing.lastName(),\n\t\tgivenName: PeachPayCustomer.billing.firstName(),\n\t\tphone: PeachPayCustomer.billing.phone(),\n\t\tstate: PeachPayCustomer.billing.state(),\n\t\tpostalCode: PeachPayCustomer.billing.postal(),\n\t};\n\n\tif (DefaultCart.total() > 0) {\n\t\treturn {\n\t\t\tintent: 'CHARGE',\n\t\t\tcurrencyCode: MerchantConfiguration.currency.code(),\n\t\t\tamount: String(DefaultCart.total()),\n\t\t\tbillingContact,\n\t\t};\n\t}\n\n\treturn {\n\t\tintent: 'STORE',\n\t\tbillingContact,\n\t};\n}\n\nexport function handleTokenResult(result: TokenResult): ProcessedTokenResult {\n\tconst extractErrorMessage = (): string => {\n\t\tlet message = '';\n\t\tif (result.errors && Array.isArray(result.errors)) {\n\t\t\tresult.errors.forEach(error => {\n\t\t\t\tmessage += error.message + '. ';\n\t\t\t});\n\t\t}\n\n\t\treturn message;\n\t};\n\n\tswitch (result.status) {\n\t\tcase 'OK':\n\t\t\treturn [result.token ?? null, null, {}];\n\t\tcase 'Cancel':\n\t\t\treturn [null, null, {\n\t\t\t\tnote: 'Customer canceled the Payment. ' + extractErrorMessage(),\n\t\t\t\tpaymentStatus: 'canceled',\n\t\t\t}];\n\t\tcase 'Abort':\n\t\t\treturn [null, null, {\n\t\t\t\tnote: 'Tokenizing the payment method was aborted. ' + extractErrorMessage(),\n\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t}];\n\t\tcase 'Error':\n\t\t\treturn [null, null, {\n\t\t\t\tnote: 'Tokenizing the payment method encountered an error. ' + extractErrorMessage(),\n\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t}];\n\t\tcase 'Invalid':\n\t\t\treturn [null, null, {\n\t\t\t\tnote: extractErrorMessage(),\n\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t}];\n\t\tcase 'Unknown':\n\t\tdefault:\n\t\t\treturn [null, null, {\n\t\t\t\tnote: 'Tokenizing the payment method encountered an unknown status. ' + extractErrorMessage(),\n\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t}];\n\t}\n}\n\nexport {\n\tsquarePaymentRequestOptions,\n};\n","import {type Payments, type Card} from '@square/web-payments-sdk-types';\nimport {$qsAll} from '../../../../@shared/ts/dom';\nimport {type SquareGateway} from '../../models/square';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {createVerifyBuyerDetails, handleTokenResult} from './square';\nimport cardBadgeURL from '../../../img/badge/card.svg';\nimport cardImageURL from '../../../img/marks/credit-card-regular.svg';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\n\nfunction initSquareCardMethod(): SquareGateway {\n\tlet cardElement: Card | null = null;\n\tlet activated = false;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.SQUARE_CARD_GATEWAY, 'title') ?? getLocaleText('Card'),\n\t\tgatewayId: 'peachpay_square_card',\n\t\tdescription: '',\n\t\tassets: {\n\t\t\ttitle: {src: cardImageURL},\n\t\t\tbadge: {src: cardBadgeURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tasync activate(payments: Payments) {\n\t\t\tif (activated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tactivated = true;\n\n\t\t\tconst squareCardOptions = {\n\t\t\t\tstyle: {\n\t\t\t\t\t'.input-container': {\n\t\t\t\t\t\tborderWidth: '1px',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t$qsAll('div.pp-pm-saved-option[data-gateway=\"peachpay_square_card\"]', $el => {\n\t\t\t\t$el.style.padding = '0';\n\t\t\t\t$el.style.border = 'unset';\n\t\t\t});\n\n\t\t\tcardElement = await payments.card(squareCardOptions);\n\t\t\tcardElement.attach('#pp-pms-new div.pp-pm-saved-option[data-gateway=\"peachpay_square_card\"]').catch(() => {/**/});\n\t\t\tcardElement?.recalculateSize();\n\n\t\t\tlet previousPaymentMethod = '';\n\t\t\tstore.subscribe(() => {\n\t\t\t\tconst currentPaymentMethod = PaymentConfiguration.selectedGateway();\n\t\t\t\tif (currentPaymentMethod === previousPaymentMethod) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tpreviousPaymentMethod = currentPaymentMethod;\n\n\t\t\t\tcardElement?.recalculateSize();\n\t\t\t});\n\t\t},\n\t\tasync tokenize(payments: Payments) {\n\t\t\tif (!cardElement) {\n\t\t\t\treturn [null, null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Square Card element not found while attempting to tokenize card.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tlet tokenResult;\n\t\t\ttry {\n\t\t\t\ttokenResult = await cardElement.tokenize();\n\t\t\t} catch (error: unknown) {\n\t\t\t\treturn [null, null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Square Card element tokenization failed with error: ${(error as Error).message}`,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst [sourceId, _, transactionUpdate] = handleTokenResult(tokenResult);\n\t\t\tif (!sourceId) {\n\t\t\t\treturn [null, null, transactionUpdate];\n\t\t\t}\n\n\t\t\t// Square SCA/3DS support. https://developer.squareup.com/docs/sca-overview\n\t\t\ttry {\n\t\t\t\tconst response = await payments.verifyBuyer(sourceId, createVerifyBuyerDetails());\n\n\t\t\t\treturn [sourceId, response?.token ?? null, {}];\n\t\t\t} catch (error: unknown) {\n\t\t\t\treturn [null, null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Verifying Square buyer failed with error: ${(error as Error).message}`,\n\t\t\t\t}];\n\t\t\t}\n\t\t},\n\t};\n}\n\nexport {initSquareCardMethod};\n","import {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {render} from '../../reducers/rootReducer';\nimport {handleTokenResult} from './square';\nimport {PaymentMethodUnsupportedError, type GooglePay, PaymentMethodAlreadyDestroyedError, PaymentMethodNotAttachedError, type Payments} from '@square/web-payments-sdk-types';\nimport {type SquareGateway, type ProcessedTokenResult} from '../../models/square';\nimport googlepayBadgeURL from '../../../img/badge/google-pay.svg';\nimport googlepayImageURL from '../../../img/marks/google-pay.svg';\nimport {GatewayEligibility, type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {type PaymentRequest} from '@square/web-payments-sdk-types';\nimport {debounce} from '../../util/debounce';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {type TransactionUpdate} from '../../../../@shared/ts/transaction';\n\n// https://developer.squareup.com/reference/sdks/web/payments/digital-wallets/google-pay\nfunction initSquareGooglePayMethod(): SquareGateway {\n\tlet gpay: GooglePay | null = null;\n\tlet buttonInstanceWaitingInterval: NodeJS.Timer | undefined;\n\n\tconst config: GatewayConfiguration = {\n\t\tgatewayId: 'peachpay_square_googlepay',\n\t\tname: Feature.metadata<string>(FeatureFlag.SQUARE_GOOGLEPAY_GATEWAY, 'title') ?? getLocaleText('Google Pay'),\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\tbadge: {src: googlepayBadgeURL},\n\t\t\ttitle: {src: googlepayImageURL},\n\t\t},\n\t\thasCustomButton: true,\n\t};\n\n\tconst debouncedActivate = debounce((async (payments: Payments, paymentRequest: PaymentRequest) => {\n\t\tif (gpay) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (PaymentConfiguration.eligibleGateway(config.gatewayId) !== GatewayEligibility.Eligible) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tgpay = await payments.googlePay(paymentRequest);\n\t\t\tstore.dispatch(render());\n\n\t\t\tconfig.initialized = true;\n\t\t\tstore.dispatch(render());\n\t\t} catch (error: unknown) {\n\t\t\tconfig.initialized = false;\n\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\tconfig.browser = false;\n\t\t\t}\n\n\t\t\tstore.dispatch(render());\n\n\t\t\tconsole.error(error);\n\t\t\tcaptureSentryException(error as Error, {\n\t\t\t\tpaymentRequest,\n\t\t\t});\n\t\t}\n\t}) satisfies SquareGateway['activate']);\n\n\treturn {\n\t\tconfig,\n\t\tactivate: debouncedActivate,\n\t\treset() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\tconst oldInstance = gpay;\n\t\t\tgpay = null;\n\n\t\t\toldInstance?.destroy().catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\t\tattach(selector: string) {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tbuttonInstanceWaitingInterval = setInterval(() => {\n\t\t\t\tif (gpay) {\n\t\t\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\t\t\tgpay?.attach(selector, {\n\t\t\t\t\t\tbuttonColor: 'black',\n\t\t\t\t\t\tbuttonSizeMode: 'fill',\n\t\t\t\t\t})?.catch(error => {\n\t\t\t\t\t\tconfig.initialized = false;\n\t\t\t\t\t\tstore.dispatch(render());\n\n\t\t\t\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\tcaptureSentryException(error as Error, {selector});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t},\n\t\tdetach() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tgpay?.detach()?.catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodNotAttachedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\tgpay = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\t\tasync tokenize(): Promise<ProcessedTokenResult> {\n\t\t\ttry {\n\t\t\t\tif (!gpay) {\n\t\t\t\t\treturn [null, null, {\n\t\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\t\tnote: 'Failed to find Google Pay instance while attempting to tokenize the payment.',\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tconst result = await gpay.tokenize();\n\t\t\t\treturn handleTokenResult(result);\n\t\t\t} catch (error: unknown) {\n\t\t\t\tconst update: TransactionUpdate = {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'An unknown exception occured while tokenizing the payment.',\n\t\t\t\t};\n\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tupdate.note = error.message;\n\t\t\t\t}\n\n\t\t\t\treturn [null, null, update];\n\t\t\t}\n\t\t},\n\t};\n}\n\nfunction getDescription(): string {\n\treturn /* html */ `\n<img style=\"display: block; text-align: left; height: 1.5rem; \" src=\"${googlepayImageURL}\">\n<p style=\"text-align: left; margin: 0.5rem 0;\">${getLocaleText('Google Pay selected for checkout.')}</p>\n<hr/>\n<p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${getLocaleText('Another step will appear after submitting your order to complete your purchase details.')}<p>`;\n}\n\nexport {initSquareGooglePayMethod};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {type SquareGateway, type ProcessedTokenResult} from '../../models/square';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {render} from '../../reducers/rootReducer';\nimport {handleTokenResult} from './square';\nimport {PeachPayCustomer} from '../../reducers/peachPayCustomerReducer';\nimport {type PlaidEventName, type ACH, type Payments} from '@square/web-payments-sdk-types';\nimport achBankImageURL from '../../../img/marks/bank.svg';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {type TransactionUpdate} from '../../../../@shared/ts/transaction';\n\nfunction initSquareACHDebitMethod(): SquareGateway {\n\tlet ach: ACH | null = null;\n\tlet activated = false;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.SQUARE_ACH, 'title') ?? getLocaleText('US Bank Account'),\n\t\tgatewayId: 'peachpay_square_ach',\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\tbadge: {src: achBankImageURL},\n\t\t\ttitle: {src: achBankImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tasync activate(payments: Payments) {\n\t\t\tif (activated) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tactivated = true;\n\n\t\t\ttry {\n\t\t\t\tach = await payments.ach({\n\t\t\t\t\tredirectURI: window.location.href,\n\t\t\t\t\ttransactionId: '0',\n\t\t\t\t});\n\n\t\t\t\tach.addEventListener('ontokenization' as PlaidEventName.ON_TOKENIZATION, _event => {\n\t\t\t\t\t// Required for plaid authentication to succeed. Event matches TokenResult from tokenize().\n\t\t\t\t});\n\n\t\t\t\tconfig.initialized = true;\n\t\t\t\tstore.dispatch(render());\n\t\t\t} catch (error: unknown) {\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t}\n\t\t},\n\t\tasync tokenize(): Promise<ProcessedTokenResult> {\n\t\t\ttry {\n\t\t\t\tif (!ach) {\n\t\t\t\t\treturn [null, null, {\n\t\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\t\tnote: 'Failed to find ACH Bank instance while attempting to tokenize the payment.',\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tconst result = await ach.tokenize({\n\t\t\t\t\taccountHolderName: PeachPayCustomer.billing.fullName(),\n\t\t\t\t});\n\t\t\t\treturn handleTokenResult(result);\n\t\t\t} catch (error: unknown) {\n\t\t\t\tconst update: TransactionUpdate = {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'An unknown exception occured while tokenizing the payment.',\n\t\t\t\t};\n\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tupdate.note = error.message;\n\t\t\t\t}\n\n\t\t\t\treturn [null, null, update];\n\t\t\t}\n\t\t},\n\t};\n}\n\nfunction getDescription(): string {\n\treturn /* html */ `\n\t<p style=\"margin: 0;\">\n\t\t${getLocaleText('After selecting <b>Pay</b> a prompt will appear to select a bank account.')}\n\t</p>\n\t<hr>\n\t<p class=\"muted\" style=\"margin: 0;\">\n\t\t${getLocaleText('Note: Payments may take up to 5 days to complete.')}\n\t</p>\n\t`;\n}\n\nexport {initSquareACHDebitMethod};\n\n","import {type SquareGateway, type ProcessedTokenResult} from '../../models/square';\nimport {getLocaleText} from '../../util/translation';\nimport {handleTokenResult} from './square';\nimport {type TokenResult, type CashAppPay, type TokenizationEvent, PaymentMethodAlreadyDestroyedError, PaymentMethodUnsupportedError, PaymentMethodNotAttachedError, type Payments} from '@square/web-payments-sdk-types';\nimport cashappImageURL from '../../../img/marks/cashapp-green.svg';\nimport cashappImageLogoOnlyURL from '../../../img/marks/cashapp-green-logo-only.svg';\nimport {GatewayEligibility, type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {store} from '../../store';\nimport {render} from '../../reducers/rootReducer';\nimport {type PaymentRequest} from '@square/web-payments-sdk-types';\nimport {debounce} from '../../util/debounce';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {type TransactionUpdate} from '../../../../@shared/ts/transaction';\n\nfunction initSquareCashAppMethod(): SquareGateway {\n\tlet cashapp: CashAppPay | null = null;\n\tlet buttonInstanceWaitingInterval: NodeJS.Timer | undefined;\n\n\t// Resolve/reject callbacks for cashapp token promise. Null represents payment not in the tokenization state\n\tlet tokenResolver: ((value: TokenResult) => void) | null = null;\n\tlet tokenRejecter: ((reason: string) => void) | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.SQUARE_CASHAPP, 'title') ?? getLocaleText('Cash App'),\n\t\tgatewayId: 'peachpay_square_cashapp',\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\ttitle: {src: cashappImageURL},\n\t\t\tbadge: {src: cashappImageLogoOnlyURL},\n\t\t},\n\t\thasCustomButton: true,\n\t};\n\n\tconst debouncedActivate = debounce((async (payments: Payments, paymentRequest: PaymentRequest) => {\n\t\tif (cashapp) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (PaymentConfiguration.eligibleGateway(config.gatewayId) !== GatewayEligibility.Eligible) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tcashapp = await payments.cashAppPay(paymentRequest, {\n\t\t\t\tredirectURL: window.top?.location.href ?? '',\n\t\t\t});\n\n\t\t\tcashapp.addEventListener('ontokenization', e => {\n\t\t\t\tconst detail = e.detail as TokenizationEvent;\n\n\t\t\t\tif (detail.tokenResult && tokenResolver) {\n\t\t\t\t\ttokenResolver(detail.tokenResult);\n\t\t\t\t} else if (tokenRejecter) {\n\t\t\t\t\ttokenRejecter('An unknown tokenization error occured');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcashapp.addEventListener('customerDismissed', _e => {\n\t\t\t\tif (tokenRejecter) {\n\t\t\t\t\ttokenRejecter('Customer closed cashapp popup');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconfig.initialized = true;\n\t\t\tstore.dispatch(render());\n\t\t} catch (error: unknown) {\n\t\t\tconfig.initialized = false;\n\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\tconfig.browser = false;\n\t\t\t}\n\n\t\t\tstore.dispatch(render());\n\n\t\t\tconsole.error(error);\n\t\t\tcaptureSentryException(error as Error);\n\t\t}\n\t}) satisfies SquareGateway['activate']);\n\n\treturn {\n\t\tconfig,\n\t\tactivate: debouncedActivate,\n\t\treset() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\tif (!cashapp) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst oldInstance = cashapp;\n\t\t\tcashapp = null;\n\t\t\ttokenResolver = null;\n\t\t\ttokenRejecter = null;\n\n\t\t\toldInstance?.destroy()?.catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\t\tattach(selector: string) {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tbuttonInstanceWaitingInterval = setInterval(() => {\n\t\t\t\tif (cashapp) {\n\t\t\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\n\t\t\t\t\tcashapp?.attach(selector, {\n\t\t\t\t\t\tshape: 'semiround',\n\t\t\t\t\t\tsize: 'medium',\n\t\t\t\t\t})?.catch(error => {\n\t\t\t\t\t\tconfig.initialized = false;\n\t\t\t\t\t\tstore.dispatch(render());\n\n\t\t\t\t\t\tif (error instanceof PaymentMethodUnsupportedError) {\n\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\tcaptureSentryException(error as Error, {selector});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t},\n\t\tdetach() {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tcashapp?.detach()?.catch(error => {\n\t\t\t\tif (error instanceof PaymentMethodNotAttachedError) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\n\t\t\t\tif (error instanceof PaymentMethodAlreadyDestroyedError) {\n\t\t\t\t\tcashapp = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(error);\n\t\t\t\tcaptureSentryException(error as Error);\n\t\t\t});\n\t\t},\n\t\tasync tokenize(): Promise<ProcessedTokenResult> {\n\t\t\ttry {\n\t\t\t\tif (!cashapp) {\n\t\t\t\t\treturn [null, null, {\n\t\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\t\tnote: 'Failed to find Cash App instance while attempting to tokenize the payment.',\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tconst tokenResult = new Promise<TokenResult>((resolve, reject) => {\n\t\t\t\t\ttokenResolver = resolve;\n\t\t\t\t\ttokenRejecter = reject;\n\t\t\t\t});\n\n\t\t\t\treturn handleTokenResult(await tokenResult);\n\t\t\t} catch (error: unknown) {\n\t\t\t\tconst update: TransactionUpdate = {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'An unknown exception occured while tokenizing the payment.',\n\t\t\t\t};\n\n\t\t\t\tif (error === 'Customer closed cashapp popup') {\n\t\t\t\t\tupdate.note = error;\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tupdate.note = error.message;\n\t\t\t\t}\n\n\t\t\t\treturn [null, null, update];\n\t\t\t}\n\t\t},\n\t};\n}\n\nfunction getDescription(): string {\n\treturn /* html */ `\n<img style=\"display: block; text-align: left; height: 1.5rem; \" src=${cashappImageURL}>\n<p style=\"text-align: left; margin: 0.5rem 0;\">${getLocaleText('Cash App selected for checkout.')}</p>\n<hr/>\n<p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${\n\tgetLocaleText('After pressing the Cash App button you\\'ll be prompted to scan a QR code or approve the payment through the Cash App mobile app.')\n}<p>`;\n}\n\nexport {initSquareCashAppMethod};\n"],"names":["setupSquareButtonRendering","gateways","store","subscribe","gatewayId","page","loadingMode","config","startsWith","$element","classList","remove","add","hasCustomButton","renderSquareButtonDisplay","selectedGateway","modalUI","gatewayConfig","mode","innerHTML","total","disabled","renderSquareButtonLoading","Object","entries","sort","m1","state","mountTarget","length","gateway","newMountTarget","customButtonMountTarget","detach","attach","controlSquareCustomButtonMounts","getLocaleTitle","title","metadata","billing","country","initSquareApplePayMethod","buttonInstanceWaitingInterval","$temp","apay","$applePayButton","document","createElement","querySelector","name","description","assets","badge","src","browser","undefined","window","debouncedActivate","debounce","payments","paymentRequest","eligibleGateway","Eligible","applePay","initialized","dispatch","PaymentMethodUnsupportedError","console","error","activate","reset","clearInterval","oldInstance","destroy","catch","PaymentMethodAlreadyDestroyedError","selector","setInterval","$el","insertAdjacentElement","tokenize","paymentStatus","note","handleTokenResult","update","Error","message","initSquarePaymentIntegration","orderService","applicationId","locationId","scriptSrc","Square","squareMethods","gatewayImplementations","gatewayConfigurations","enabled","method","cardElement","activated","card","squareCardOptions","style","borderWidth","padding","border","recalculateSize","previousPaymentMethod","currentPaymentMethod","tokenResult","sourceId","transactionUpdate","verifyBuyer","createVerifyBuyerDetails","response","token","initSquareCardMethod","gpay","googlePay","buttonColor","buttonSizeMode","log","PaymentMethodNotAttachedError","initSquareGooglePayMethod","ach","redirectURI","location","href","transactionId","addEventListener","_event","accountHolderName","fullName","initSquareACHDebitMethod","afterpay","$title","innerText","afterpayClearpay","buttonType","finalCtaButtonType","initSquareAfterpayMethod","cashapp","tokenResolver","tokenRejecter","cashAppPay","redirectURL","top","e","detail","_e","shape","size","Promise","resolve","reject","initSquareCashAppMethod","registerSquareGateways","confirm","event","reportValidity","$target","target","closest","shadowRoot","squarePaymentFlow","$button","$paymentRequest","previousState","data","squarePaymentRequestOptions","currentState","JSON","stringify","isCashapp","verificationId","startTransaction","transactionError","transaction","errorMessage","complete","extraFormData","peachpay_square_source_id","placeOrder","orderError","orderResult","result","redirect","countryCode","general","wcLocationInfoData","store_country","currencyCode","currency","code","lineItems","squarePaymentRequestLineItems","discounts","squarePaymentRequestDiscountOptions","taxLineItems","label","amount","totalTax","toFixed","Array","contents","cartItem","push","cart","Number","parseFloat","display_price","price","couponRecord","coupon","id","billingContact","addressLines","address1","address2","city","email","familyName","lastName","givenName","firstName","phone","postalCode","postal","intent","String","extractErrorMessage","errors","isArray","forEach","status"],"sourceRoot":""}