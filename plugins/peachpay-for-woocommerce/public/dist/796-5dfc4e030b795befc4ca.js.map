{"version":3,"file":"796-5dfc4e030b795befc4ca.js","mappings":"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","sources":["webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/authnet/button.ts","webpack://peachpay-for-woocommerce/./frontend/native-checkout/ts/authnet/class-authnet-element.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/authnet/authnet.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/authnet/gateways/card.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/authnet/gateways/echeck.ts"],"sourcesContent":["import {$qsAll} from '../../../../@shared/ts/dom';\nimport {type LoadingMode, type ModalPage} from '../../models/IEnvironment';\nimport {DefaultCart} from '../../reducers/cartReducer';\nimport {Environment} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {formatCurrencyString} from '../../util/currency';\nimport {getLocaleText} from '../../util/translation';\n\nexport function setupAuthnetButton() {\n\tstore.subscribe(() => {\n\t\trenderAuthnetButtonDisplay(\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.page(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\n\t\trenderAuthnetButtonLoading(\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\t});\n}\n\n/**\n * Renders the Authorize.net button display state.\n */\n\nfunction renderAuthnetButtonDisplay(gatewayId: string, page: ModalPage, loadingMode: LoadingMode) {\n\t// Show/hide Authnet button container\n\tif (gatewayId.startsWith('peachpay_authnet_') && page === 'payment') {\n\t\t$qsAll('.authnet-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.authnet-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Hide/Show button\n\tif (loadingMode === 'loading') {\n\t\t$qsAll('.authnet-btn', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.authnet-btn', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t}\n}\n\nfunction renderAuthnetButtonLoading(mode: LoadingMode) {\n\t// Show/hide the external spinner\n\tif (mode === 'loading') {\n\t\t$qsAll('.authnet-spinner-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.authnet-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide the internal spinner\n\tif (mode === 'processing') {\n\t\t$qsAll('.authnet-btn-spinner', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.authnet-btn-spinner', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide processing message\n\tif (mode === 'processing') {\n\t\t$qsAll('.authnet-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = getLocaleText('Processing');\n\t\t});\n\t} else {\n\t\t$qsAll('.authnet-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = `${getLocaleText('Pay')} ${formatCurrencyString(DefaultCart.total())}`;\n\t\t});\n\t}\n\n\t// Enable/disable the authnet button\n\tif (mode === 'finished') {\n\t\t$qsAll<HTMLInputElement>('.authnet-btn', $element => {\n\t\t\t$element.disabled = false;\n\t\t});\n\t} else {\n\t\t$qsAll<HTMLInputElement>('.authnet-btn', $element => {\n\t\t\t$element.disabled = true;\n\t\t});\n\t}\n}\n","import {$qs, $qsAll} from '../../../@shared/ts/dom';\n\ntype ElementOptions = {\n\tloginId: string;\n\tclientKey: string;\n\tacceptSrc: string;\n};\n\ntype Token = {\n\ttoken?: {\n\t\tdescriptor: string;\n\t\tvalue: string;\n\t};\n\terror?: Array<{code: string; message: string}>;\n\tcancel?: boolean;\n};\n\ntype AuthnetTokenizationResponse = {\n\tmessages: {\n\t\tresultCode: 'Error' | 'Ok';\n\t\tmessage: Array<{\n\t\t\tcode: string;\n\t\t\ttext: string;\n\t\t}>;\n\t};\n\topaqueData?: {\n\t\tdataDescriptor: string;\n\t\tdataValue: string;\n\t};\n};\n\ndeclare global {\n\tinterface Window {\n\t\tpeachpayAuthnetResponseHandler?: (response: AuthnetTokenizationResponse) => void;\n\t}\n}\n\nclass AuthnetButtonElement {\n\tprivate static isTokenizing = false;\n\n\tprivate readonly loginId: string;\n\tprivate readonly clientKey: string;\n\tprivate readonly scriptSrc: string;\n\n\tprivate $button: HTMLButtonElement | null;\n\tprivate $script: HTMLScriptElement | null;\n\n\tconstructor(options: ElementOptions) {\n\t\tthis.loginId = options.loginId;\n\t\tthis.clientKey = options.clientKey;\n\n\t\tthis.scriptSrc = options.acceptSrc;\n\n\t\tthis.$script = null;\n\t\tthis.$button = null;\n\t}\n\n\tpublic async tokenize(type: 'bank' | 'card'): Promise<Token> {\n\t\tif (AuthnetButtonElement.isTokenizing) {\n\t\t\tthrow new Error('Tokenization is already in progress. Only 1 tokenization attempt may occur at a time.');\n\t\t}\n\n\t\tAuthnetButtonElement.isTokenizing = true;\n\n\t\tawait this.mount(type);\n\n\t\t// This is an artificial delay to let the just mounted popup script load a little and prevent some rendering artifacts.\n\t\tawait new Promise<void>(res => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tres();\n\t\t\t}, 1000);\n\t\t});\n\n\t\treturn new Promise<Token>((resolve, reject) => {\n\t\t\tif (!this.$button) {\n\t\t\t\treject(new Error('Failed to locate Authorize.net tokenize button'));\n\t\t\t}\n\n\t\t\twindow.peachpayAuthnetResponseHandler = (response: AuthnetTokenizationResponse) => {\n\t\t\t\tif (response.messages.resultCode === 'Ok' && response.opaqueData) {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\ttoken: {\n\t\t\t\t\t\t\tdescriptor: response.opaqueData.dataDescriptor,\n\t\t\t\t\t\t\tvalue: response.opaqueData.dataValue,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (response.messages.resultCode === 'Error') {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\terror: response.messages.message.map(err => ({code: err.code, message: err.text})),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error('Unhandled Authorize.net tokenization response.'));\n\t\t\t\t}\n\n\t\t\t\twindow.peachpayAuthnetResponseHandler = undefined;\n\t\t\t\tAuthnetButtonElement.isTokenizing = false;\n\t\t\t};\n\n\t\t\tthis.$button?.click();\n\n\t\t\tconst container = $qs('#AcceptUIContainer');\n\t\t\tconst targetNode = $qs('#AcceptUIContainer')?.parentNode;\n\t\t\tconst config = {attributes: false, childList: true, subtree: false};\n\t\t\tconst observer = new MutationObserver(mutations => {\n\t\t\t\tfor (const mutation of mutations) {\n\t\t\t\t\tif (mutation.type === 'childList' && mutation.removedNodes[0] === container) {\n\t\t\t\t\t\tobserver.disconnect();\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tcancel: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t\twindow.peachpayAuthnetResponseHandler = undefined;\n\t\t\t\t\t\tAuthnetButtonElement.isTokenizing = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (targetNode) {\n\t\t\t\tobserver.observe(targetNode, config);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async mount(type: 'bank' | 'card' | 'all'): Promise<void> {\n\t\t// Make sure everything is cleaned up before opening!\n\t\tthis.unmount();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst paymentOptions = {\n\t\t\t\tshowCreditCard: type === 'card' || type === 'all',\n\t\t\t\tshowBankAccount: type === 'bank' || type === 'all',\n\t\t\t};\n\n\t\t\tconst $button = document.createElement('button');\n\t\t\t$button.classList.add('AcceptUI');\n\t\t\t$button.setAttribute('style', 'display: none;');\n\t\t\t$button.setAttribute('type', 'button');\n\t\t\t$button.setAttribute('data-billingAddressOptions', '{\"show\":false,\"required\":false}');\n\t\t\t$button.setAttribute('data-apiLoginID', this.loginId);\n\t\t\t$button.setAttribute('data-clientKey', this.clientKey);\n\t\t\t$button.setAttribute('data-acceptUIFormBtnTxt', 'Submit');\n\t\t\t$button.setAttribute('data-acceptUIFormHeaderTxt', 'Card Information');\n\t\t\t$button.setAttribute('data-paymentOptions', JSON.stringify(paymentOptions));\n\t\t\t$button.setAttribute('data-responseHandler', 'peachpayAuthnetResponseHandler');\n\t\t\t$button.textContent = 'Pay';\n\t\t\tthis.$button = $button;\n\n\t\t\tconst $script = document.createElement('script');\n\t\t\t$script.type = 'text/javascript';\n\t\t\t$script.src = this.scriptSrc;\n\t\t\t$script.classList.add('pp-authnet-accept-script');\n\t\t\t$script.onload = () => {\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\t$script.onerror = () => {\n\t\t\t\treject(new Error('Failed to load tokenization script.'));\n\t\t\t};\n\n\t\t\tthis.$script = $script;\n\n\t\t\tdocument.body.appendChild($button);\n\t\t\tdocument.body.appendChild($script);\n\t\t});\n\t}\n\n\tprivate unmount() {\n\t\tthis.$script?.remove();\n\t\tthis.$button?.remove();\n\n\t\t$qsAll('#AcceptUIBackground,#AcceptUIContainer', $el => {\n\t\t\t$el.remove();\n\t\t});\n\t}\n}\n\nexport {\n\tAuthnetButtonElement,\n\ttype Token,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {Feature, startModalProcessing, stopModalLoading} from '../../reducers/environmentReducer';\nimport {store} from '../../store';\nimport {displayPaymentErrorMessage, type OrderService} from '../order';\nimport {initAuthnetCardMethod} from './gateways/card';\nimport {PaymentConfiguration, registerGatewayBatch} from '../../reducers/paymentConfigurationReducer';\nimport {setupAuthnetButton} from './button';\nimport {$qsAll} from '../../../../@shared/ts/dom';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {initAuthnetEcheckMethod} from './gateways/echeck';\nimport {AuthnetButtonElement} from '../../../../native-checkout/ts/authnet/class-authnet-element';\nimport {getErrorString} from '../../../../@shared/ts/error';\nimport {getLocaleText} from '../../util/translation';\n\n/**\n * Implementation type for a Authnet gateway\n */\nexport type AuthnetGateway = {config: GatewayConfiguration};\n\nexport default function initAuthnetPaymentIntegration(orderService: OrderService) {\n\tconst acceptSrc = Feature.metadata<string>(FeatureFlag.AUTHNET_GATEWAY, 'accept_src');\n\tconst clientKey = Feature.metadata<string>(FeatureFlag.AUTHNET_GATEWAY, 'public_client_key');\n\tconst loginId = Feature.metadata<string>(FeatureFlag.AUTHNET_GATEWAY, 'login_id');\n\n\tif (!loginId || !clientKey || !acceptSrc) {\n\t\treturn;\n\t}\n\n\tconst buttonElement = new AuthnetButtonElement({\n\t\tloginId,\n\t\tclientKey,\n\t\tacceptSrc,\n\t});\n\n\tconst gateways = registerAuthnetGateways();\n\tsetupAuthnetButton();\n\t// transaction flow\n\t$qsAll('.authnet-btn', $el => {\n\t\t$el.addEventListener('click', async () => {\n\t\t\tstore.dispatch(startModalProcessing());\n\n\t\t\tconst gatewayId = PaymentConfiguration.selectedGateway();\n\t\t\tconst gateway = gateways[gatewayId];\n\t\t\tif (!gateway) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet type: 'card' | 'bank' = 'card';\n\t\t\tif (gatewayId === 'peachpay_authnet_echeck') {\n\t\t\t\ttype = 'bank';\n\t\t\t}\n\n\t\t\tconst {token, error, cancel} = await buttonElement.tokenize(type);\n\n\t\t\tconst {error: transactionError, result: transaction} = await orderService.startTransaction(gateway.config.gatewayId);\n\t\t\tif (transactionError || !transaction) {\n\t\t\t\tconst errorMessage = transactionError ? getErrorString(transactionError) : getLocaleText('An unknown error occured while starting the transaction. Please refresh the page and try again.');\n\t\t\t\tdisplayPaymentErrorMessage(errorMessage);\n\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (cancel) {\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error ?? !token) {\n\t\t\t\tdisplayPaymentErrorMessage(error?.map(error => `${error.code}: ${error.message}`).join('\\n') ?? 'An unknown error occured while tokenizing the payment method.');\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {error: orderError, result: orderResult} = await orderService.placeOrder(transaction, {\n\t\t\t\tpeachpay_authnet_data_descriptor: token.descriptor,\n\t\t\t\tpeachpay_authnet_data_value: token.value,\n\t\t\t});\n\n\t\t\tif (orderError || !orderResult || orderResult.result !== 'success') {\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (window.top) {\n\t\t\t\tawait transaction.complete();\n\t\t\t\twindow.top.location = orderResult.redirect;\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction registerAuthnetGateways() {\n\tconst gatewayImplementations: Record<string, AuthnetGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tif (Feature.enabled(FeatureFlag.AUTHNET_CARD_GATEWAY)) {\n\t\tconst method = initAuthnetCardMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.AUTHNET_ECHECK_GATEWAY)) {\n\t\tconst method = initAuthnetEcheckMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n","import {type GatewayConfiguration} from '../../../models/GatewayConfiguration';\nimport {getLocaleText} from '../../../util/translation';\nimport {type AuthnetGateway} from '../authnet';\nimport cardBadgeURL from '../../../../img/badge/card.svg';\nimport cardImageURL from '../../../../img/marks/credit-card-regular.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initAuthnetCardMethod(): AuthnetGateway {\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.AUTHNET_CARD_GATEWAY, 'title') ?? getLocaleText('Card'),\n\t\tgatewayId: 'peachpay_authnet_card',\n\t\tdescription: `${getLocaleText('After clicking <b>Pay</b>, a window will appear where you can enter your card information.')}`,\n\t\tassets: {\n\t\t\ttitle: {src: cardImageURL},\n\t\t\tbadge: {src: cardBadgeURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t};\n}\n\nexport {initAuthnetCardMethod};\n","import {type GatewayConfiguration} from '../../../models/GatewayConfiguration';\nimport {getLocaleText} from '../../../util/translation';\nimport {type AuthnetGateway} from '../authnet';\nimport bankImageURL from '../../../../img/marks/bank.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initAuthnetEcheckMethod(): AuthnetGateway {\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.AUTHNET_ECHECK_GATEWAY, 'title') ?? getLocaleText('US bank account'),\n\t\tgatewayId: 'peachpay_authnet_echeck',\n\t\tdescription: `${getLocaleText('After clicking <b>Pay</b>, a window will appear where you can enter your card information.')}`,\n\t\tassets: {\n\t\t\ttitle: {src: bankImageURL},\n\t\t\tbadge: {src: bankImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t};\n}\n\nexport {initAuthnetEcheckMethod};\n"],"names":["setupAuthnetButton","store","subscribe","gatewayId","page","loadingMode","startsWith","$element","classList","remove","add","renderAuthnetButtonDisplay","selectedGateway","modalUI","mode","innerHTML","total","disabled","renderAuthnetButtonLoading","options","this","loginId","clientKey","scriptSrc","acceptSrc","$script","$button","tokenize","type","AuthnetButtonElement","isTokenizing","Error","mount","Promise","res","setTimeout","resolve","reject","window","peachpayAuthnetResponseHandler","response","messages","resultCode","opaqueData","token","descriptor","dataDescriptor","value","dataValue","error","message","map","err","code","text","undefined","click","container","targetNode","parentNode","observer","MutationObserver","mutations","mutation","removedNodes","disconnect","cancel","observe","attributes","childList","subtree","unmount","paymentOptions","showCreditCard","showBankAccount","document","createElement","setAttribute","JSON","stringify","textContent","src","onload","onerror","body","appendChild","$el","initAuthnetPaymentIntegration","orderService","metadata","buttonElement","gateways","gatewayImplementations","gatewayConfigurations","enabled","method","config","name","description","assets","title","badge","card","bank","initAuthnetEcheckMethod","dispatch","registerAuthnetGateways","addEventListener","gateway","startTransaction","transactionError","transaction","errorMessage","join","placeOrder","peachpay_authnet_data_descriptor","peachpay_authnet_data_value","orderError","orderResult","result","top","complete","location","redirect"],"sourceRoot":""}