<?php
/**
 * PaymentPlanOptionModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Splitit
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Splitit\Model;

use \ArrayAccess;
use \Splitit\ObjectSerializer;

/**
 * PaymentPlanOptionModel Class Doc Comment
 *
 * @category Class
 * @package  Splitit
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPlanOptionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentPlanOptionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number_of_installments' => 'int',
        'first_installment_amount' => 'float',
        'installment_amount' => 'float',
        'last_installment_amount' => 'float',
        'links' => '\Splitit\Model\LinksModel',
        'terms_and_conditions_brief' => 'string',
        'installment_frequency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number_of_installments' => 'int32',
        'first_installment_amount' => 'decimal',
        'installment_amount' => 'decimal',
        'last_installment_amount' => 'decimal',
        'links' => null,
        'terms_and_conditions_brief' => null,
        'installment_frequency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'number_of_installments' => false,
		'first_installment_amount' => false,
		'installment_amount' => false,
		'last_installment_amount' => false,
		'links' => false,
		'terms_and_conditions_brief' => false,
		'installment_frequency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_of_installments' => 'NumberOfInstallments',
        'first_installment_amount' => 'FirstInstallmentAmount',
        'installment_amount' => 'InstallmentAmount',
        'last_installment_amount' => 'LastInstallmentAmount',
        'links' => 'Links',
        'terms_and_conditions_brief' => 'TermsAndConditionsBrief',
        'installment_frequency' => 'InstallmentFrequency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_of_installments' => 'setNumberOfInstallments',
        'first_installment_amount' => 'setFirstInstallmentAmount',
        'installment_amount' => 'setInstallmentAmount',
        'last_installment_amount' => 'setLastInstallmentAmount',
        'links' => 'setLinks',
        'terms_and_conditions_brief' => 'setTermsAndConditionsBrief',
        'installment_frequency' => 'setInstallmentFrequency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_of_installments' => 'getNumberOfInstallments',
        'first_installment_amount' => 'getFirstInstallmentAmount',
        'installment_amount' => 'getInstallmentAmount',
        'last_installment_amount' => 'getLastInstallmentAmount',
        'links' => 'getLinks',
        'terms_and_conditions_brief' => 'getTermsAndConditionsBrief',
        'installment_frequency' => 'getInstallmentFrequency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number_of_installments', $data ?? [], null);
        $this->setIfExists('first_installment_amount', $data ?? [], null);
        $this->setIfExists('installment_amount', $data ?? [], null);
        $this->setIfExists('last_installment_amount', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('terms_and_conditions_brief', $data ?? [], null);
        $this->setIfExists('installment_frequency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number_of_installments'] === null) {
            $invalidProperties[] = "'number_of_installments' can't be null";
        }
        if ($this->container['first_installment_amount'] === null) {
            $invalidProperties[] = "'first_installment_amount' can't be null";
        }
        if ($this->container['installment_amount'] === null) {
            $invalidProperties[] = "'installment_amount' can't be null";
        }
        if ($this->container['last_installment_amount'] === null) {
            $invalidProperties[] = "'last_installment_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_of_installments
     *
     * @return int
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int $number_of_installments number_of_installments
     *
     * @return self
     */
    public function setNumberOfInstallments($number_of_installments)
    {

        if (is_null($number_of_installments)) {
            throw new \InvalidArgumentException('non-nullable number_of_installments cannot be null');
        }

        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets first_installment_amount
     *
     * @return float
     */
    public function getFirstInstallmentAmount()
    {
        return $this->container['first_installment_amount'];
    }

    /**
     * Sets first_installment_amount
     *
     * @param float $first_installment_amount first_installment_amount
     *
     * @return self
     */
    public function setFirstInstallmentAmount($first_installment_amount)
    {

        if (is_null($first_installment_amount)) {
            throw new \InvalidArgumentException('non-nullable first_installment_amount cannot be null');
        }

        $this->container['first_installment_amount'] = $first_installment_amount;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return float
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param float $installment_amount installment_amount
     *
     * @return self
     */
    public function setInstallmentAmount($installment_amount)
    {

        if (is_null($installment_amount)) {
            throw new \InvalidArgumentException('non-nullable installment_amount cannot be null');
        }

        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets last_installment_amount
     *
     * @return float
     */
    public function getLastInstallmentAmount()
    {
        return $this->container['last_installment_amount'];
    }

    /**
     * Sets last_installment_amount
     *
     * @param float $last_installment_amount last_installment_amount
     *
     * @return self
     */
    public function setLastInstallmentAmount($last_installment_amount)
    {

        if (is_null($last_installment_amount)) {
            throw new \InvalidArgumentException('non-nullable last_installment_amount cannot be null');
        }

        $this->container['last_installment_amount'] = $last_installment_amount;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Splitit\Model\LinksModel|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Splitit\Model\LinksModel|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {

        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }

        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets terms_and_conditions_brief
     *
     * @return string|null
     */
    public function getTermsAndConditionsBrief()
    {
        return $this->container['terms_and_conditions_brief'];
    }

    /**
     * Sets terms_and_conditions_brief
     *
     * @param string|null $terms_and_conditions_brief terms_and_conditions_brief
     *
     * @return self
     */
    public function setTermsAndConditionsBrief($terms_and_conditions_brief)
    {

        if (is_null($terms_and_conditions_brief)) {
            throw new \InvalidArgumentException('non-nullable terms_and_conditions_brief cannot be null');
        }

        $this->container['terms_and_conditions_brief'] = $terms_and_conditions_brief;

        return $this;
    }

    /**
     * Gets installment_frequency
     *
     * @return string|null
     */
    public function getInstallmentFrequency()
    {
        return $this->container['installment_frequency'];
    }

    /**
     * Sets installment_frequency
     *
     * @param string|null $installment_frequency installment_frequency
     *
     * @return self
     */
    public function setInstallmentFrequency($installment_frequency)
    {

        if (is_null($installment_frequency)) {
            throw new \InvalidArgumentException('non-nullable installment_frequency cannot be null');
        }

        $this->container['installment_frequency'] = $installment_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


