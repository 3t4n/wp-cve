/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/accordion.js":
/*!**************************!*\
  !*** ./src/accordion.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    RichText = _wp$editor.RichText,\n    InspectorControls = _wp$editor.InspectorControls,\n    ColorPalette = _wp$editor.ColorPalette,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar,\n    InnerBlocks = _wp$editor.InnerBlocks;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl,\n    FormToggle = _wp$components.FormToggle;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/accordion', {\n  title: \"Hot Accordion\",\n  icon: 'list-view',\n  category: 'hot-blocks',\n  description: __('Accordion block contains heading and placeholder for other blocks. Click on the heading reveals the content below it.'),\n  supports: {\n    align: true\n  },\n  attributes: {\n    headingString: {\n      type: 'array',\n      source: 'children',\n      selector: 'h4'\n    },\n    fontColor: {\n      type: 'string',\n      \"default\": 'black'\n    },\n    tabOpen: {\n      type: 'boolean',\n      \"default\": false\n    },\n    tabOpenDisplay: {\n      type: 'string',\n      \"default\": 'none'\n    },\n    activeTabClass: {\n      type: 'string',\n      \"default\": 'accordion-heading'\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        fontColor = _props$attributes.fontColor,\n        tabOpen = _props$attributes.tabOpen,\n        tabOpenDisplay = _props$attributes.tabOpenDisplay,\n        activeTabClass = _props$attributes.activeTabClass; // This function is called when RichText changes\n    // By default the new string is passed to the function\n    // not an event object like react normally would do\n\n    function onHeadingChange(changes) {\n      setAttributes({\n        headingString: changes\n      });\n    } //create a handler that will set the color when you click on the ColorPalette\n\n\n    function onTextColorChange(changes) {\n      setAttributes({\n        fontColor: changes\n      });\n    }\n\n    function onTabOpenChange(changes) {\n      setAttributes({\n        tabOpen: !tabOpen\n      });\n\n      if (tabOpen === true) {\n        setAttributes({\n          tabOpenDisplay: \"none\",\n          activeTabClass: \"accordion-heading\"\n        });\n      } else {\n        setAttributes({\n          tabOpenDisplay: \"block\",\n          activeTabClass: \"accordion-heading active_tab\"\n        });\n      }\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Heading Color')), React.createElement(ColorPalette, {\n      value: fontColor,\n      onChange: onTextColorChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Tab Open By Default')), React.createElement(FormToggle, {\n      checked: tabOpen,\n      onChange: onTabOpenChange\n    }))), React.createElement(\"div\", {\n      className: className\n    }, React.createElement(RichText, {\n      tagName: \"h4\",\n      className: activeTabClass // adding a class we can target\n      ,\n      value: attributes.headingString,\n      onChange: onHeadingChange,\n      placeholder: __('Enter your heading here!'),\n      style: {\n        color: fontColor\n      }\n    }), React.createElement(\"div\", {\n      className: \"accordion-content\",\n      style: {\n        display: tabOpenDisplay\n      }\n    }, React.createElement(InnerBlocks, null)))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var _props$attributes2 = props.attributes,\n        fontColor = _props$attributes2.fontColor,\n        tabOpen = _props$attributes2.tabOpen,\n        tabOpenDisplay = _props$attributes2.tabOpenDisplay,\n        activeTabClass = _props$attributes2.activeTabClass;\n    return React.createElement(\"div\", {\n      className: className\n    }, React.createElement(\"h4\", {\n      className: activeTabClass,\n      style: {\n        color: fontColor\n      }\n    }, attributes.headingString), React.createElement(\"div\", {\n      className: \"accordion-content\",\n      style: {\n        display: tabOpenDisplay\n      }\n    }, React.createElement(InnerBlocks.Content, null)));\n  }\n});\n\n//# sourceURL=webpack:///./src/accordion.js?");

/***/ }),

/***/ "./src/background.js":
/*!***************************!*\
  !*** ./src/background.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    InspectorControls = _wp$editor.InspectorControls,\n    ColorPalette = _wp$editor.ColorPalette,\n    MediaUpload = _wp$editor.MediaUpload,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar,\n    InnerBlocks = _wp$editor.InnerBlocks;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/background-color', {\n  title: \"Background Color\",\n  icon: 'admin-appearance',\n  category: 'hot-blocks',\n  description: __('This block is a placeholder for other blocks. You can assign a background color to this block and set width. Make sure you added one or more blocks into the Background Color block as well. ;)'),\n  supports: {\n    align: true,\n    anchor: true\n  },\n  attributes: {\n    backgroundColor: {\n      type: 'string',\n      \"default\": 'transparent'\n    },\n    maxContentWidth: {\n      type: 'string',\n      \"default\": 'auto'\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        backgroundColor = _props$attributes.backgroundColor,\n        maxContentWidth = _props$attributes.maxContentWidth; //create a handler that will set the color when you click on the ColorPalette\n\n    function onBackgroundColorChange(changes) {\n      setAttributes({\n        backgroundColor: changes\n      });\n    }\n\n    function onMaxContentWidthChange(changes) {\n      setAttributes({\n        maxContentWidth: changes\n      });\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Background Color')), React.createElement(ColorPalette, {\n      value: backgroundColor,\n      onChange: onBackgroundColorChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Content Width'),\n      value: attributes.maxContentWidth,\n      onChange: onMaxContentWidthChange\n    }))), React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundColor: backgroundColor\n      }\n    }, React.createElement(\"div\", {\n      className: \"background_content\",\n      style: {\n        width: maxContentWidth\n      }\n    }, React.createElement(InnerBlocks, null)))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var _props$attributes2 = props.attributes,\n        backgroundColor = _props$attributes2.backgroundColor,\n        maxContentWidth = _props$attributes2.maxContentWidth;\n    return React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundColor: backgroundColor\n      }\n    }, React.createElement(\"div\", {\n      className: \"background_content\",\n      style: {\n        width: maxContentWidth\n      }\n    }, React.createElement(InnerBlocks.Content, null)));\n  }\n});\n\n//# sourceURL=webpack:///./src/background.js?");

/***/ }),

/***/ "./src/button.js":
/*!***********************!*\
  !*** ./src/button.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    RichText = _wp$editor.RichText,\n    InspectorControls = _wp$editor.InspectorControls,\n    ColorPalette = _wp$editor.ColorPalette,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl,\n    FormToggle = _wp$components.FormToggle;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/button', {\n  title: \"Hot Button\",\n  icon: 'arrow-right-alt',\n  category: 'hot-blocks',\n  description: __('Create a simple button. Set colors and dimensions of the button and assing a link to it.'),\n  supports: {\n    align: true\n  },\n  attributes: {\n    textString: {\n      type: 'array',\n      source: 'children',\n      selector: 'a'\n    },\n    alignment: {\n      type: 'string'\n    },\n    fontColor: {\n      type: 'string',\n      \"default\": 'black'\n    },\n    buttonColor: {\n      type: 'string',\n      \"default\": 'orange'\n    },\n    fontSize: {\n      type: 'string',\n      \"default\": '18px'\n    },\n    buttonWidth: {\n      type: 'string',\n      \"default\": '200px'\n    },\n    buttonHeight: {\n      type: 'string',\n      \"default\": '30px'\n    },\n    buttonBorderRadius: {\n      type: 'string',\n      \"default\": '5px'\n    },\n    buttonLink: {\n      type: 'string',\n      \"default\": '#'\n    },\n    linkNewTab: {\n      type: 'boolean',\n      \"default\": false\n    },\n    linkNewTabDisplay: {\n      type: 'string',\n      \"default\": '_self'\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        alignment = _props$attributes.alignment,\n        fontColor = _props$attributes.fontColor,\n        buttonColor = _props$attributes.buttonColor,\n        fontSize = _props$attributes.fontSize,\n        buttonWidth = _props$attributes.buttonWidth,\n        buttonHeight = _props$attributes.buttonHeight,\n        buttonBorderRadius = _props$attributes.buttonBorderRadius,\n        buttonLink = _props$attributes.buttonLink,\n        linkNewTab = _props$attributes.linkNewTab,\n        linkNewTabDisplay = _props$attributes.linkNewTabDisplay;\n\n    function onTextChange(changes) {\n      setAttributes({\n        textString: changes\n      });\n    }\n\n    function onChangeAlignment(updatedAlignment) {\n      setAttributes({\n        alignment: updatedAlignment\n      });\n    } //create a handler that will set the color when you click on the ColorPalette\n\n\n    function onTextColorChange(changes) {\n      setAttributes({\n        fontColor: changes\n      });\n    }\n\n    function onButtonColorChange(changes) {\n      setAttributes({\n        buttonColor: changes\n      });\n    }\n\n    function onFontSizeChange(changes) {\n      setAttributes({\n        fontSize: changes\n      });\n    }\n\n    function onButtonWidthChange(changes) {\n      setAttributes({\n        buttonWidth: changes\n      });\n    }\n\n    function onButtonHeightChange(changes) {\n      setAttributes({\n        buttonHeight: changes\n      });\n    }\n\n    function onButtonBorderRadiusChange(changes) {\n      setAttributes({\n        buttonBorderRadius: changes\n      });\n    }\n\n    function onButtonLinkChange(changes) {\n      setAttributes({\n        buttonLink: changes\n      });\n    }\n\n    function onLinkNewTabChange(changes) {\n      setAttributes({\n        linkNewTab: !linkNewTab\n      });\n\n      if (linkNewTab === true) {\n        setAttributes({\n          linkNewTabDisplay: \"_self\"\n        });\n      } else {\n        setAttributes({\n          linkNewTabDisplay: \"_blank\"\n        });\n      }\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(PanelBody, {\n      title: __('Color Settings'),\n      initialOpen: false\n    }, React.createElement(PanelRow, {\n      className: \"flex_wrap_wrap\"\n    }, React.createElement(\"p\", null, __('Font Color')), React.createElement(ColorPalette, {\n      value: fontColor,\n      onChange: onTextColorChange\n    })), React.createElement(PanelRow, {\n      className: \"flex_wrap_wrap\"\n    }, React.createElement(\"p\", null, __('Button Color')), React.createElement(ColorPalette, {\n      value: buttonColor,\n      onChange: onButtonColorChange\n    }))), React.createElement(PanelBody, {\n      title: __('Dimensions'),\n      initialOpen: false\n    }, React.createElement(PanelRow, null, React.createElement(TextControl, {\n      label: __('Font Size'),\n      value: attributes.fontSize,\n      onChange: onFontSizeChange\n    })), React.createElement(PanelRow, null, React.createElement(TextControl, {\n      label: __('Button Width'),\n      value: attributes.buttonWidth,\n      onChange: onButtonWidthChange\n    })), React.createElement(PanelRow, null, React.createElement(TextControl, {\n      label: __('Button Height'),\n      value: attributes.buttonHeight,\n      onChange: onButtonHeightChange\n    })), React.createElement(PanelRow, null, React.createElement(TextControl, {\n      label: __('Border Radius'),\n      value: attributes.buttonBorderRadius,\n      onChange: onButtonBorderRadiusChange\n    }))), React.createElement(PanelBody, {\n      title: __('Link'),\n      initialOpen: false\n    }, React.createElement(PanelRow, null, React.createElement(TextControl, {\n      label: __('Button Link'),\n      value: attributes.buttonLink,\n      onChange: onButtonLinkChange\n    })), React.createElement(PanelRow, null, React.createElement(\"div\", null, __('Open Link in New Tab')), React.createElement(FormToggle, {\n      checked: linkNewTab,\n      onChange: onLinkNewTabChange\n    })))), React.createElement(BlockControls, {\n      key: \"controls\"\n    }, React.createElement(AlignmentToolbar, {\n      value: attributes.alignment,\n      onChange: onChangeAlignment\n    })), React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundColor: buttonColor,\n        width: buttonWidth,\n        borderRadius: buttonBorderRadius\n      }\n    }, React.createElement(RichText, {\n      tagName: \"a\",\n      value: attributes.textString,\n      onChange: onTextChange,\n      placeholder: \"Enter button text\",\n      style: {\n        textAlign: alignment,\n        fontSize: fontSize,\n        color: fontColor,\n        height: buttonHeight,\n        lineHeight: buttonHeight\n      },\n      target: attributes.linkNewTabDisplay\n    }))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var _props$attributes2 = props.attributes,\n        alignment = _props$attributes2.alignment,\n        fontColor = _props$attributes2.fontColor,\n        buttonColor = _props$attributes2.buttonColor,\n        fontSize = _props$attributes2.fontSize,\n        buttonWidth = _props$attributes2.buttonWidth,\n        buttonHeight = _props$attributes2.buttonHeight,\n        buttonBorderRadius = _props$attributes2.buttonBorderRadius,\n        buttonLink = _props$attributes2.buttonLink,\n        linkNewTab = _props$attributes2.linkNewTab,\n        linkNewTabDisplay = _props$attributes2.linkNewTabDisplay;\n    return React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundColor: buttonColor,\n        width: buttonWidth,\n        borderRadius: buttonBorderRadius\n      }\n    }, React.createElement(\"a\", {\n      href: attributes.buttonLink,\n      target: attributes.linkNewTabDisplay,\n      style: {\n        textAlign: attributes.alignment,\n        fontSize: fontSize,\n        color: fontColor,\n        height: buttonHeight,\n        lineHeight: buttonHeight\n      }\n    }, attributes.textString));\n  }\n});\n\n//# sourceURL=webpack:///./src/button.js?");

/***/ }),

/***/ "./src/contact.js":
/*!************************!*\
  !*** ./src/contact.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    InspectorControls = _wp$editor.InspectorControls,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/contact', {\n  title: \"Hot Contact\",\n  icon: 'email',\n  category: 'hot-blocks',\n  description: __('Simple contact form with anti-spam protection.'),\n  supports: {\n    align: true\n  },\n  attributes: {\n    antiSpamQuestion: {\n      type: 'string',\n      \"default\": '8 + 4 = ?'\n    },\n    antiSpamAnswer: {\n      type: 'string',\n      \"default\": '12'\n    },\n    buttonText: {\n      type: 'string',\n      \"default\": 'Send'\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        antiSpamQuestion = _props$attributes.antiSpamQuestion,\n        antiSpamAnswer = _props$attributes.antiSpamAnswer,\n        buttonText = _props$attributes.buttonText;\n\n    function onAntiSpamQuestionChange(changes) {\n      setAttributes({\n        antiSpamQuestion: changes\n      });\n    }\n\n    function onAntiSpamAnswerChange(changes) {\n      setAttributes({\n        antiSpamAnswer: changes\n      });\n    }\n\n    function onButtonTextChange(changes) {\n      setAttributes({\n        buttonText: changes\n      });\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Question'),\n      value: attributes.antiSpamQuestion,\n      onChange: onAntiSpamQuestionChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Answer'),\n      value: attributes.antiSpamAnswer,\n      onChange: onAntiSpamAnswerChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Button Text'),\n      value: attributes.buttonText,\n      onChange: onButtonTextChange\n    }))), React.createElement(\"div\", {\n      className: className\n    }, React.createElement(\"form\", {\n      method: \"post\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"hb_name\",\n      id: \"hb_name\",\n      size: \"15\",\n      value: \"\",\n      placeholder: __('Name *')\n    }), React.createElement(\"input\", {\n      type: \"email\",\n      name: \"hb_email\",\n      id: \"hb_email\",\n      size: \"15\",\n      value: \"\",\n      placeholder: __('E-mail *')\n    }), React.createElement(\"textarea\", {\n      name: \"hb_message\",\n      id: \"hb_message\",\n      placeholder: __('Message *'),\n      spellcheck: \"false\"\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"hb_anti_spam_answer\",\n      id: \"hb_anti_spam_answer\",\n      size: \"15\",\n      value: \"\",\n      placeholder: 'Anti-spam: ' + attributes.antiSpamQuestion\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      name: \"hb_submit\",\n      id: \"hb_submit\",\n      value: attributes.buttonText\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      value: attributes.antiSpamAnswer\n    })))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var _props$attributes2 = props.attributes,\n        antiSpamQuestion = _props$attributes2.antiSpamQuestion,\n        antiSpamAnswer = _props$attributes2.antiSpamAnswer,\n        buttonText = _props$attributes2.buttonText;\n    return React.createElement(\"div\", {\n      className: className\n    }, React.createElement(\"form\", {\n      method: \"post\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      required: true,\n      name: \"hb_name\",\n      id: \"hb_name\",\n      size: \"15\",\n      value: \"\",\n      placeholder: __('Name *')\n    }), React.createElement(\"input\", {\n      type: \"email\",\n      required: true,\n      name: \"hb_email\",\n      id: \"hb_email\",\n      size: \"15\",\n      value: \"\",\n      placeholder: __('E-mail *')\n    }), React.createElement(\"textarea\", {\n      required: true,\n      name: \"hb_message\",\n      id: \"hb_message\",\n      placeholder: __('Message *'),\n      spellcheck: \"false\"\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      required: true,\n      name: \"hb_anti_spam_answer\",\n      id: \"hb_anti_spam_answer\",\n      size: \"15\",\n      value: \"\",\n      placeholder: 'Anti-spam: ' + attributes.antiSpamQuestion\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      name: \"hb_submit\",\n      id: \"hb_submit\",\n      value: attributes.buttonText\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"hb_anti_spam_correct\",\n      value: attributes.antiSpamAnswer\n    })));\n  }\n});\n\n//# sourceURL=webpack:///./src/contact.js?");

/***/ }),

/***/ "./src/header.js":
/*!***********************!*\
  !*** ./src/header.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    RichText = _wp$editor.RichText,\n    InspectorControls = _wp$editor.InspectorControls,\n    ColorPalette = _wp$editor.ColorPalette,\n    MediaUpload = _wp$editor.MediaUpload,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/header', {\n  title: \"Hot Header\",\n  icon: 'format-image',\n  category: 'hot-blocks',\n  description: __('Add header of your page. This block allows you to set your heading and intro text. You can add a background image with overlay color.'),\n  supports: {\n    align: true\n  },\n  attributes: {\n    headingString: {\n      type: 'array',\n      source: 'children',\n      selector: 'h1'\n    },\n    textString: {\n      type: 'array',\n      source: 'children',\n      selector: 'p'\n    },\n    fontColor: {\n      type: 'string',\n      \"default\": 'black'\n    },\n    overlayColor: {\n      type: 'string',\n      \"default\": 'transparent'\n    },\n    backgroundImage: {\n      type: 'string',\n      \"default\": null // no image by default!\n\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        fontColor = _props$attributes.fontColor,\n        overlayColor = _props$attributes.overlayColor,\n        backgroundImage = _props$attributes.backgroundImage; // This function is called when RichText changes\n    // By default the new string is passed to the function\n    // not an event object like react normally would do\n\n    function onHeadingChange(changes) {\n      setAttributes({\n        headingString: changes\n      });\n    }\n\n    function onTextChange(changes) {\n      setAttributes({\n        textString: changes\n      });\n    } //create a handler that will set the color when you click on the ColorPalette\n\n\n    function onTextColorChange(changes) {\n      setAttributes({\n        fontColor: changes\n      });\n    }\n\n    function onOverlayColorChange(changes) {\n      setAttributes({\n        overlayColor: changes\n      });\n    } // handles image object\n\n\n    function onImageSelect(imageObject) {\n      setAttributes({\n        backgroundImage: imageObject.sizes.full.url\n      });\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Font Color')), React.createElement(ColorPalette, {\n      value: fontColor,\n      onChange: onTextColorChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Overlay Color')), React.createElement(ColorPalette, {\n      value: overlayColor,\n      onChange: onOverlayColorChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Background Image')), React.createElement(MediaUpload, {\n      onSelect: onImageSelect,\n      type: \"image\",\n      value: backgroundImage,\n      render: function render(_ref) {\n        var open = _ref.open;\n        return React.createElement(\"button\", {\n          className: \"button\",\n          onClick: open\n        }, \"Add Image\");\n      }\n    }))), React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundImage: \"url(\".concat(backgroundImage, \")\"),\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      style: {\n        backgroundColor: overlayColor\n      }\n    }), React.createElement(RichText, {\n      tagName: \"h1\",\n      className: \"content\" // adding a class we can target\n      ,\n      value: attributes.headingString,\n      onChange: onHeadingChange,\n      placeholder: __('Enter your heading here!'),\n      style: {\n        color: fontColor\n      }\n    }), React.createElement(RichText, {\n      tagName: \"p\",\n      className: \"content\" // adding a class we can target\n      ,\n      value: attributes.textString,\n      onChange: onTextChange,\n      placeholder: __('Enter your text here!'),\n      style: {\n        color: fontColor\n      }\n    }))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var _props$attributes2 = props.attributes,\n        fontColor = _props$attributes2.fontColor,\n        overlayColor = _props$attributes2.overlayColor,\n        backgroundImage = _props$attributes2.backgroundImage;\n    return React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundImage: \"url(\".concat(backgroundImage, \")\"),\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      style: {\n        backgroundColor: overlayColor\n      }\n    }), React.createElement(\"h1\", {\n      \"class\": \"content\",\n      style: {\n        color: fontColor\n      }\n    }, attributes.headingString), React.createElement(\"p\", {\n      \"class\": \"content\",\n      style: {\n        color: fontColor\n      }\n    }, attributes.textString));\n  }\n});\n\n//# sourceURL=webpack:///./src/header.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accordion.js */ \"./src/accordion.js\");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_accordion_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _background_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./background.js */ \"./src/background.js\");\n/* harmony import */ var _background_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_background_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _button_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./button.js */ \"./src/button.js\");\n/* harmony import */ var _button_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_button_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _contact_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contact.js */ \"./src/contact.js\");\n/* harmony import */ var _contact_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_contact_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _header_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./header.js */ \"./src/header.js\");\n/* harmony import */ var _header_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_header_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _maps_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./maps.js */ \"./src/maps.js\");\n/* harmony import */ var _maps_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_maps_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _parallax_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parallax.js */ \"./src/parallax.js\");\n/* harmony import */ var _parallax_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_parallax_js__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/maps.js":
/*!*********************!*\
  !*** ./src/maps.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    InspectorControls = _wp$editor.InspectorControls,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/map', {\n  title: \"Hot Map\",\n  icon: 'location-alt',\n  category: 'hot-blocks',\n  description: __('Enter your location or address and map will be fetched from Google Maps.'),\n  supports: {\n    align: true\n  },\n  attributes: {\n    mapLocation: {\n      type: 'string',\n      \"default\": 'guggenheim museum new york'\n    },\n    mapHeight: {\n      type: 'string',\n      \"default\": '400px'\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        mapLocation = _props$attributes.mapLocation,\n        mapHeight = _props$attributes.mapHeight;\n\n    function onMapLocationChange(changes) {\n      setAttributes({\n        mapLocation: changes\n      });\n    }\n\n    function onMapHeightChange(changes) {\n      setAttributes({\n        mapHeight: changes\n      });\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Location'),\n      value: attributes.mapLocation,\n      onChange: onMapLocationChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Height'),\n      value: attributes.mapHeight,\n      onChange: onMapHeightChange\n    }))), React.createElement(\"div\", {\n      className: className\n    }, React.createElement(\"iframe\", {\n      src: 'https://maps.google.com/maps?q=' + attributes.mapLocation + '&ie=UTF8&view=map&saddr=' + attributes.mapLocation + '&f=q&output=embed',\n      style: {\n        height: mapHeight\n      }\n    }))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var mapHeight = props.attributes.mapHeight;\n    return React.createElement(\"div\", {\n      className: className\n    }, React.createElement(\"iframe\", {\n      src: 'https://maps.google.com/maps?q=' + attributes.mapLocation + '&ie=UTF8&view=map&saddr=' + attributes.mapLocation + '&f=q&output=embed',\n      style: {\n        height: mapHeight\n      }\n    }));\n  }\n});\n\n//# sourceURL=webpack:///./src/maps.js?");

/***/ }),

/***/ "./src/parallax.js":
/*!*************************!*\
  !*** ./src/parallax.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __ = wp.i18n.__;\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$editor = wp.editor,\n    InspectorControls = _wp$editor.InspectorControls,\n    ColorPalette = _wp$editor.ColorPalette,\n    MediaUpload = _wp$editor.MediaUpload,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar,\n    InnerBlocks = _wp$editor.InnerBlocks;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    PanelRow = _wp$components.PanelRow,\n    TextControl = _wp$components.TextControl;\nvar Fragment = wp.element.Fragment;\nregisterBlockType('hotblocks/parallax', {\n  title: \"Hot Parallax\",\n  icon: 'image-flip-vertical',\n  category: 'hot-blocks',\n  description: __('This block is a placeholder for other blocks. Assign a background image to this block and it will use a parallax scrolling effect. Make sure you added one or more blocks into the Hot Parallax block as well. ;)'),\n  supports: {\n    align: true,\n    anchor: true\n  },\n  attributes: {\n    overlayColor: {\n      type: 'string',\n      \"default\": 'transparent'\n    },\n    backgroundImage: {\n      type: 'string',\n      \"default\": null // no image by default!\n\n    },\n    maxContentWidth: {\n      type: 'string',\n      \"default\": '600px'\n    }\n  },\n  // props are passed to edit by default\n  // props contains things like setAttributes and attributes\n  edit: function edit(props) {\n    // we are peeling off the things we need\n    var setAttributes = props.setAttributes,\n        attributes = props.attributes,\n        className = props.className,\n        focus = props.focus;\n    var _props$attributes = props.attributes,\n        overlayColor = _props$attributes.overlayColor,\n        backgroundImage = _props$attributes.backgroundImage,\n        maxContentWidth = _props$attributes.maxContentWidth; //create a handler that will set the color when you click on the ColorPalette\n\n    function onOverlayColorChange(changes) {\n      setAttributes({\n        overlayColor: changes\n      });\n    } // handles image object\n\n\n    function onImageSelect(imageObject) {\n      setAttributes({\n        backgroundImage: imageObject.sizes.full.url\n      });\n    }\n\n    function onMaxContentWidthChange(changes) {\n      setAttributes({\n        maxContentWidth: changes\n      });\n    }\n\n    return [React.createElement(InspectorControls, null, React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Overlay Color')), React.createElement(ColorPalette, {\n      value: overlayColor,\n      onChange: onOverlayColorChange\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(\"p\", null, __('Background Image')), React.createElement(MediaUpload, {\n      onSelect: onImageSelect,\n      type: \"image\",\n      value: backgroundImage,\n      render: function render(_ref) {\n        var open = _ref.open;\n        return React.createElement(\"button\", {\n          className: \"button\",\n          onClick: open\n        }, \"Add Image\");\n      }\n    }), React.createElement(\"p\", null)), React.createElement(\"div\", {\n      style: {\n        padding: \"4px 16px\"\n      }\n    }, React.createElement(TextControl, {\n      label: __('Content Width'),\n      value: attributes.maxContentWidth,\n      onChange: onMaxContentWidthChange\n    }))), React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundImage: \"url(\".concat(backgroundImage, \")\"),\n        backgroundAttachment: 'fixed',\n        backgroundSize: 'cover'\n      }\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      style: {\n        backgroundColor: overlayColor\n      }\n    }), React.createElement(\"div\", {\n      className: \"parallax_content\",\n      style: {\n        width: maxContentWidth\n      }\n    }, React.createElement(InnerBlocks, null)))];\n  },\n  // again, props are automatically passed to save and edit\n  save: function save(props) {\n    var attributes = props.attributes,\n        className = props.className;\n    var _props$attributes2 = props.attributes,\n        overlayColor = _props$attributes2.overlayColor,\n        backgroundImage = _props$attributes2.backgroundImage,\n        maxContentWidth = _props$attributes2.maxContentWidth;\n    return React.createElement(\"div\", {\n      className: className,\n      style: {\n        backgroundImage: \"url(\".concat(backgroundImage, \")\"),\n        backgroundAttachment: 'fixed',\n        backgroundSize: 'cover'\n      }\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      style: {\n        backgroundColor: overlayColor\n      }\n    }), React.createElement(\"div\", {\n      className: \"parallax_content\",\n      style: {\n        width: maxContentWidth\n      }\n    }, React.createElement(InnerBlocks.Content, null)));\n  }\n});\n\n//# sourceURL=webpack:///./src/parallax.js?");

/***/ })

/******/ });