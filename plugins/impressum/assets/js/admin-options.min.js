(()=>{var __webpack_modules__={217:()=>{eval("/**\n * JavaScript functions for the admin options page.\n * \n * @author\t\tEpiphyt\n * @license\t\tGPL2 <https://www.gnu.org/licenses/gpl-2.0.html>\n */\n\n// all fields that should be be checked by there value\nvar fieldsToCheck = [\n\t'address',\n\t'country',\n\t'email',\n\t'name',\n\t'phone',\n];\n\ndocument.addEventListener( 'DOMContentLoaded', function() {\n\tvar countrySelect = document.getElementById( 'country' );\n\tvar legalEntitySelect = document.getElementById( 'legal_entity' );\n\tvar pressLawCheckbox = document.getElementById( 'press_law_checkbox' );\n\tvar pressLawCheckboxRow = document.querySelector( '.impressum_press_law_checkbox' );\n\tvar pressLawInputRow = document.querySelector( '.impressum_press_law' );\n\tvar vatId = document.getElementById( 'vat_id' );\n\t\n\t// function calls\n\tfor ( var i = 0; i < fieldsToCheck.length; i++ ) {\n\t\tcheckFieldLength( document.getElementById( fieldsToCheck[ i ] ), fieldsToCheck[ i ] );\n\t}\n\t\n\tif ( countrySelect ) checkCountry();\n\tif ( legalEntitySelect ) checkLegalEntity();\n\tif ( pressLawCheckbox && pressLawInputRow ) checkPressLaw();\n\t\n\t// check formal vat id validity\n\tif ( vatId ) {\n\t\t// use keyup instead of input to match also autocomplete values\n\t\tvatId.addEventListener( 'keyup', function( event ) {\n\t\t\tvar currentTarget = event.currentTarget;\n\t\t\t\n\t\t\t// replace any whitespaces\n\t\t\tvar regex = new RegExp( /[^A-Za-z0-9\\*\\+]+/g );\n\t\t\t// test before, otherwise you canâ€™t select the value\n\t\t\tif ( regex.test( currentTarget.value ) ) {\n\t\t\t\tcurrentTarget.value = currentTarget.value.replace( /[^A-Za-z0-9\\*\\+]+/g, '' );\n\t\t\t}\n\t\t\t\n\t\t\t// do the check\n\t\t\tif ( ! isValidVatIdFormat( currentTarget.value ) ) {\n\t\t\t\tvar message = imprintL10n.vatIdErrorMessage;\n\t\t\t\t\n\t\t\t\ttoggleMessage( false, vatId, message );\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoggleMessage( true, vatId, '' );\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t/**\n\t * Check given value of a field and show or hide a message.\n\t * \n\t * @param\t{Element}\tfield The field DOM element to check\n\t * @param\t{String}\tfieldName The name of the field\n\t */\n\tfunction checkFieldLength( field, fieldName ) {\n\t\tvar message = imprintL10n[ fieldName + 'ErrorMessage' ];\n\t\t\n\t\t// check on change or input\n\t\t[ 'change', 'input' ].forEach( function( event ) {\n\t\t\tif ( ! field ) return;\n\t\t\t\n\t\t\tfield.addEventListener( event, function( event ) {\n\t\t\t\tvar currentTarget = event.currentTarget;\n\t\t\t\tvar hideMessage = currentTarget.value.length !== 0 || currentTarget.placeholder.length !== 0;\n\t\t\t\t\n\t\t\t\ttoggleMessage( hideMessage, field, message );\n\t\t\t} );\n\t\t} );\n\t}\n\t\n\t/**\n\t * Check for given values of the country and show or hide elements.\n\t */\n\tfunction checkCountry() {\n\t\ttoggleFieldsByCountry( countrySelect.value, legalEntitySelect.value );\n\t\t\n\t\t// check on select change\n\t\tcountrySelect.addEventListener( 'change', function( event ) {\n\t\t\ttoggleFieldsByCountry( event.currentTarget.value, legalEntitySelect.value );\n\t\t} );\n\t}\n\t\n\t/**\n\t * Check for given values of the legal entity and show or hide elements.\n\t */\n\tfunction checkLegalEntity() {\n\t\t// check on page load\n\t\tvar message = imprintL10n.legalEntityErrorMessage;\n\t\tvar needProMessage = legalEntitySelect.value === 'individual' || legalEntitySelect.value === 'self';\n\t\ttoggleMessage( needProMessage, legalEntitySelect, message );\n\t\t\n\t\t// check on select change\n\t\tlegalEntitySelect.addEventListener( 'change', function( event ) {\n\t\t\tvar currentTarget = event.currentTarget;\n\t\t\t\n\t\t\tneedProMessage = currentTarget.value === 'individual' || currentTarget.value === 'self';\n\t\t\ttoggleMessage( needProMessage, legalEntitySelect, message );\n\t\t} );\n\t}\n\t\n\t/**\n\t * Check if the user enabled the press law checkbox.\n\t */\n\tfunction checkPressLaw() {\n\t\t// return if there is no input row found\n\t\tif ( pressLawInputRow === undefined ) return;\n\t\t\n\t\t// if checkbox is not checked\n\t\tif ( ! pressLawCheckbox.checked ) {\n\t\t\t// hide the input\n\t\t\tpressLawInputRow.style.display = 'none';\n\t\t}\n\t\t\n\t\t// on click on checkbox\n\t\tpressLawCheckbox.addEventListener( 'click', function( event ) {\n\t\t\tvar currentTarget = event.currentTarget;\n\t\t\t\n\t\t\t// if checkbox is checked\n\t\t\tif ( currentTarget.checked ) {\n\t\t\t\t// remove inline style\n\t\t\t\tpressLawInputRow.removeAttribute( 'style' );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// hide the input\n\t\t\t\tpressLawInputRow.style.display = 'none';\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t/**\n\t * Check if VAT ID has a valid format.\n\t * \n\t * @param\t{string}\tvalue The value to check\n\t * @return\t{boolean} True if VAT number is in valid format, false otherwise\n\t */\n\tfunction isValidVatIdFormat( value ) {\n\t\t// see: https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s21.html\n\t\t// modified to also allow * and + for Netherlands\n\t\tvar regex = new RegExp( '^((AT)?U[0-9]{8}|(BE)?0[0-9]{9}|(BG)?[0-9]{9,10}|(CY)?[0-9]{8}L|(CZ)?[0-9]{8,10}|(DE)?[0-9]{9}|(DK)?[0-9]{8}|(EE)?[0-9]{9}|(EL|GR)?[0-9]{9}|(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]|(FI)?[0-9]{8}|(FR)?[0-9A-Z]{2}[0-9]{9}|(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})|(HU)?[0-9]{8}|(IE)?[0-9]S[0-9]{5}L|(IT)?[0-9]{11}|(LT)?([0-9]{9}|[0-9]{12})|(LU)?[0-9]{8}|(LV)?[0-9]{11}|(MT)?[0-9]{8}|(NL)?[0-9\\+\\*]{9}B[0-9]{2}|(PL)?[0-9]{10}|(PT)?[0-9]{9}|(RO)?[0-9]{2,10}|(SE)?[0-9]{12}|(SI)?[0-9]{8}|(SK)?[0-9]{10})$' );\n\t\t\n\t\treturn regex.test( value );\n\t}\n\t\n\t/**\n\t * Toggle fields by selected country.\n\t * \n\t * @param\t{String}\tcountry The selected country\n\t * @param\t{String}\tlegalEntity The selected legal entity\n\t */\n\tfunction toggleFieldsByCountry( country, legalEntity ) {\n\t\tswitch ( country ) {\n\t\t\tcase 'de-de':\n\t\t\tcase 'deu':\n\t\t\t\tpressLawCheckboxRow.style.removeProperty( 'display' );\n\t\t\t\tpressLawInputRow.style.removeProperty( 'display' );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpressLawCheckboxRow.style.display = 'none';\n\t\t\t\tpressLawInputRow.style.display = 'none';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t/**\n\t * Toggle the notification about using the Pro version.\n\t * \n\t * @param\t{Boolean}\thideMessage True if message should be hidden, false otherwise\n\t * @param\t{Element}\tcontainer The container element that should contain the notification\n\t * @param\t{String}\ttext The text the notification should contain\n\t */\n\tfunction toggleMessage( hideMessage, container, text ) {\n\t\tvar noticeElement = container.nextElementSibling;\n\t\t\n\t\tif ( ! hideMessage && ( noticeElement === null || ! noticeElement.classList.contains( 'notice' ) ) ) {\n\t\t\tvar message = document.createElement( 'p' );\n\t\t\tvar notice = document.createElement( 'div' );\n\t\t\t\n\t\t\tmessage.innerText = text;\n\t\t\tnotice.style.maxWidth = '436px';\n\t\t\tnotice.classList.add( 'notice' );\n\t\t\tnotice.classList.add( 'inline' ); // prevent moving the notice below the headline\n\t\t\tnotice.classList.add( 'notice-warning' );\n\t\t\tnotice.appendChild( message );\n\t\t\tcontainer.after( notice );\n\t\t}\n\t\telse if ( hideMessage ) {\n\t\t\tif ( noticeElement !== null && noticeElement.classList.contains( 'notice' ) ) {\n\t\t\t\tnoticeElement.remove();\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( ! Array.prototype.inArray ) {\n\t/**\n\t * Check if an array contains a specified value.\n\t * \n\t * @param\t{String}\tneedle\n\t * @return\t{boolean}\n\t */\n\tArray.prototype.inArray = function( needle ) {\n\t\tvar length = this.length;\n\t\t\n\t\tfor ( var i = 0; i < length; i++ ) {\n\t\t\tif ( this[ i ] === needle ) return true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}\n\n/**\n * Polyfill for Child.after()\n * \n * @see\t\thttps://github.com/jserz/js_piece/blob/master/DOM/ChildNode/after()/after().md\n * @see\t\thttps://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after\n */\n( function ( arr ) {\n\tarr.forEach( function ( item ) {\n\t\tif ( item.hasOwnProperty( 'after' ) ) {\n\t\t\treturn;\n\t\t}\n\t\tObject.defineProperty( item, 'after', {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\twritable: true,\n\t\t\tvalue: function after() {\n\t\t\t\tvar argArr = Array.prototype.slice.call( arguments ),\n\t\t\t\t\tdocFrag = document.createDocumentFragment();\n\t\t\t\t\n\t\t\t\targArr.forEach( function ( argItem ) {\n\t\t\t\t\tvar isNode = argItem instanceof Node;\n\t\t\t\t\tdocFrag.appendChild( isNode ? argItem : document.createTextNode( String( argItem ) ) );\n\t\t\t\t} );\n\t\t\t\t\n\t\t\t\tthis.parentNode.insertBefore( docFrag, this.nextElementSibling );\n\t\t\t}\n\t\t} );\n\t} );\n} ) ( [ Element.prototype, CharacterData.prototype, DocumentType.prototype ] );\n\n/**\n * Polyfill for ChildNode.remove()\n * \n * @see\t\thttps://github.com/jserz/js_piece/blob/master/DOM/ChildNode/remove()/remove().md\n * @see\t\thttps://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\n */\n( function( arr ) {\n\tarr.forEach( function( item ) {\n\t\tif ( item.hasOwnProperty( 'remove' ) ) {\n\t\t\treturn;\n\t\t}\n\t\tObject.defineProperty( item, 'remove', {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\twritable: true,\n\t\t\tvalue: function remove() {\n\t\t\t\tif ( this.parentNode !== null ) {\n\t\t\t\t\tthis.parentNode.removeChild( this );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n} )( [ Element.prototype, CharacterData.prototype, DocumentType.prototype ] );\n\n\n//# sourceURL=webpack://impressum/./assets/js/admin-options.js?")}},__webpack_exports__={};__webpack_modules__[217]()})();