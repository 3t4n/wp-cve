/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*********************************************!*\
  !*** ./admin/demos/player3/js/plyr-demo.js ***!
  \*********************************************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var players = _toConsumableArray(document.querySelectorAll('.player_content'));
/**
 * Define TextToSpeechPro class .
 */
var _setPath = /*#__PURE__*/new WeakSet();
var _setTitle = /*#__PURE__*/new WeakSet();
var _setUpPlayer = /*#__PURE__*/new WeakSet();
var TextToSpeechProPlayer = /*#__PURE__*/_createClass(function TextToSpeechProPlayer(buttonId) {
  var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var button = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var TTS = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window.TTS;
  _classCallCheck(this, TextToSpeechProPlayer);
  _classPrivateMethodInitSpec(this, _setUpPlayer);
  _classPrivateMethodInitSpec(this, _setTitle);
  _classPrivateMethodInitSpec(this, _setPath);
  _defineProperty(this, "buttonId", void 0);
  _defineProperty(this, "title", '');
  _defineProperty(this, "contents", '');
  _defineProperty(this, "path", '');
  this.buttonId = buttonId;
  _classPrivateMethodGet(this, _setTitle, _setTitle2).call(this, TTS);
  _classPrivateMethodGet(this, _setPath, _setPath2).call(this, TTS);
  this.content = content;
  _classPrivateMethodGet(this, _setUpPlayer, _setUpPlayer2).call(this, ttsObj.plugin_url + '/admin/demos/player3/demo.mp3');
});
function _setPath2(tts) {
  if (tts !== null && tts !== void 0 && tts.extra) {
    this.path = tts.extra[this.buttonId].date;
  }
}
function _setTitle2(tts) {
  if (tts !== null && tts !== void 0 && tts.extra) {
    this.title = tts.extra[this.buttonId].title;
  } else {
    this.title = 'Demo Content';
  }
  // this.title = this.title.replaceAll(/[^a-zA-Z ]/g, "");
  this.title = this.title.split(' ').join('_');
  this.title = this.title + "__lang=" + tts.settings.listening.tta__listening_lang;
  this.title = this.title + "__voice=" + tts.settings.listening.tta__listening_voice;
  this.title = this.title.replaceAll(' ', '_');
  this.title = this.title.replaceAll('-', '_');
}
function _setUpPlayer2(url) {
  var should_replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var supportsAudio = !!document.createElement('audio').canPlayType;
  console.log(url);
  if (supportsAudio) {
    var playerHTML = document.createElement('audio');
    if (should_replace) {
      // console.log(should_replace)
      var _player = document.getElementById('player_content_' + this.buttonId);
      var playerChildren = _player.childNodes;
      playerChildren[0].remove();
    }
    playerHTML.setAttribute('id', 'player_' + this.buttonId);
    var source = document.createElement('source');
    source.setAttribute("type", "audio/mp3");
    playerHTML.append(source);
    playerHTML.children[0].setAttribute('src', url);
    document.getElementById('player_content_' + this.buttonId).append(playerHTML);
    var player = new Plyr(document.getElementById('player_' + this.buttonId), {
      controls: [
      // 'restart',
      'play', 'progress', 'current-time',
      // 'duration',
      'mute', 'volume', 'download', 'settings']
    });
    player.on('play', function (e) {
      // console.log(e)
    });
    player.on('pause', function (e) {
      // console.log(e)
    });
    player.on('restart', function (e) {
      // console.log('restart')
    });
    player.on('progress', function (e) {
      // console.log('progress')
    });
    player.on('volumechange', function (e) {
      // console.log('volumechange')
    });
    player.on('ended', function (e) {
      // console.log('ended')
    });
    player.on('ratechange', function () {
      // console.log('ratechange')
    });
  }
}
window.TextToSpeechProPlayer = TextToSpeechProPlayer;
/******/ })()
;