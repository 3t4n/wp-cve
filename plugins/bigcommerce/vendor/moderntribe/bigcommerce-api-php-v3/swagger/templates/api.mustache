<?php
/**
 * {{classname}}
 *
 * @package  {{invokerPackage}}
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{apiPackage}};

use \{{invokerPackage}}\Configuration;
use \{{invokerPackage}}\ApiClient;
use \{{invokerPackage}}\ApiException;
use \{{invokerPackage}}\ObjectSerializer;

{{#operations}}class {{classname}}
{

    /**
     * API Client
     *
     * @var \{{invokerPackage}}\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \{{invokerPackage}}\ApiClient $apiClient The api client to use
     */
    public function __construct(\{{invokerPackage}}\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \{{invokerPackage}}\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \{{invokerPackage}}\ApiClient $apiClient set the API client
    *
    * @return {{classname}}
    */
    public function setApiClient(\{{invokerPackage}}\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    {{#operation}}
    /**
     * Operation {{{operationId}}}
     * {{{summary}}}
     *
     *{{#description}}
     * {{.}}
     *
     *{{/description}}
{{#pathParams}}
     * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/pathParams}}
{{#bodyParams}}
     * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/bodyParams}}
     * @param array $params = []
{{#queryParams}}
     *     - {{paramName}} {{dataType}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/queryParams}}
{{#formParams}}
     *     - {{paramName}} {{dataType}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/formParams}}
     * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function {{operationId}}({{#pathParams}}${{paramName}}, {{/pathParams}}{{#bodyParams}}${{paramName}}, {{/bodyParams}}array $params = [])
    {
        list($response) = $this->{{operationId}}WithHttpInfo({{#pathParams}}${{paramName}}, {{/pathParams}}{{#bodyParams}} ${{paramName}}, {{/bodyParams}}$params);
        return $response;
    }


    /**
     * Operation {{{operationId}}}WithHttpInfo
     *
     * @see self::{{operationId}}()
{{#pathParams}}
     * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/pathParams}}
{{#bodyParams}}
     * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/bodyParams}}
     * @param array $params = []
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}, HTTP status code, HTTP response headers (array of strings)
     */
    public function {{operationId}}WithHttpInfo({{#pathParams}}${{paramName}}, {{/pathParams}}{{#bodyParams}} ${{paramName}}, {{/bodyParams}}array $params = [])
    {
        {{#allParams}}{{^isQueryParam}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        {{#isBodyParam}}
        if (!isset(${{paramName}})) {
            throw new \InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
        }
        {{/isBodyParam}}
        {{#isPathParam}}
        if (!isset(${{paramName}})) {
            throw new \InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
        }
        {{/isPathParam}}
        {{#isFormParam}}
        if (!isset($params[ '{{paramName}}' ])) {
            throw new \InvalidArgumentException('Missing the required parameter $params[ "{{paramName}}" ] when calling {{operationId}}');
        }
        {{/isFormParam}}
        {{/required}}
        {{#isFormParam}}
        ${{paramName}} = array_key_exists( '{{paramName}}', $params ) ? $params[ '{{paramName}}' ] : null;
        {{/isFormParam}}
        {{#hasValidation}}
        {{#maxLength}}
        if (strlen(${{paramName}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{/maxLength}}
        {{#minLength}}
        if (strlen(${{paramName}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if (${{paramName}} > {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if (${{paramName}} < {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if (!preg_match("{{pattern}}", ${{paramName}})) {
            throw new \InvalidArgumentException('invalid value for "{{paramName}}" when calling {{classname}}.{{operationId}}, must conform to the pattern {{pattern}}.');
        }
        {{/pattern}}
        {{/hasValidation}}
        {{/isQueryParam}}{{/allParams}}

        // parse inputs
        $resourcePath = "{{path}}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([{{#consumes}}'{{{mediaType}}}'{{#hasMore}},{{/hasMore}}{{/consumes}}]);
        {{#headerParams}}
        // header params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = $this->apiClient->getSerializer()->serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }{{/collectionFormat}}
        if (isset(${{paramName}})) {
            $headerParams['{{baseName}}'] = $this->apiClient->getSerializer()->toHeaderValue(${{paramName}});
        }
        {{/headerParams}}

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        {{#pathParams}}
        // path params
        {{#collectionFormat}}

        if (is_array(${{paramName}})) {
        ${{paramName}} = $this->apiClient->getSerializer()->serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }{{/collectionFormat}}

        if (isset(${{paramName}})) {
            $resourcePath = str_replace(
                "{" . "{{baseName}}" . "}",
                $this->apiClient->getSerializer()->toPathValue(${{paramName}}),
                $resourcePath
            );
        }
        {{/pathParams}}
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        {{#formParams}}
        // form params
        if (${{paramName}} !== null) {
            {{#isFile}}
        // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
        // See: https://wiki.php.net/rfc/curl-file-upload
        if (function_exists('curl_file_create')) {
            $formParams['{{baseName}}'] = curl_file_create($this->apiClient->getSerializer()->toFormValue(${{paramName}}));
        } else {
            $formParams['{{baseName}}'] = '@' . $this->apiClient->getSerializer()->toFormValue(${{paramName}});
        }
        {{/isFile}}
        {{^isFile}}
        $formParams['{{baseName}}'] = $this->apiClient->getSerializer()->toFormValue(${{paramName}});
        {{/isFile}}
        }
        {{/formParams}}{{#bodyParams}}
        // body params
        $_tempBody = null;
        if (isset(${{paramName}})) {
        $_tempBody = ${{paramName}};
        }{{/bodyParams}}
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        {{#authMethods}}{{#isApiKey}}
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('{{keyParamName}}');
        if (strlen($apiKey) !== 0) {
            {{#isKeyInHeader}}$headerParams['{{keyParamName}}'] = $apiKey;{{/isKeyInHeader}}{{#isKeyInQuery}}$queryParams['{{keyParamName}}'] = $apiKey;{{/isKeyInQuery}}
        }
        {{/isApiKey}}{{#isBasic}}
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        {{/isBasic}}{{#isOAuth}}
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        {{/isOAuth}}{{/authMethods}}
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                '{{httpMethod}}',
                $queryParams,
                $httpBody,
                $headerParams,
                {{#returnType}}
                '{{returnType}}',
                {{/returnType}}
                {{^returnType}}
                null,
                {{/returnType}}
                '{{path}}'
            );
            {{#returnType}}
            return [$this->apiClient->getSerializer()->deserialize($response, '{{returnType}}', $httpHeader), $statusCode, $httpHeader];
            {{/returnType}}
            {{^returnType}}
            return [null, $statusCode, $httpHeader];
            {{/returnType}}

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            {{#responses}}{{#dataType}}
                {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '{{dataType}}', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            {{/dataType}}{{/responses}}
            }

            throw $e;
        }
    }
    {{/operation}}
}
{{/operations}}
