<?php
/**
 * LineItems
 *
 * @package  BigCommerce\Api\v3
 */

/**
 * Data Model for BigCommerce's v3 Server-to-Server Cart API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\v3\Model;

use \ArrayAccess;

class LineItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LineItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'physical_items' => '\BigCommerce\Api\v3\Model\ItemPhysical[]',
        'digital_items' => '\BigCommerce\Api\v3\Model\ItemDigital[]',
        'gift_certificates' => '\BigCommerce\Api\v3\Model\ItemGiftCertificate[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'physical_items' => 'physical_items',
        'digital_items' => 'digital_items',
        'gift_certificates' => 'gift_certificates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'physical_items' => 'setPhysicalItems',
        'digital_items' => 'setDigitalItems',
        'gift_certificates' => 'setGiftCertificates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'physical_items' => 'getPhysicalItems',
        'digital_items' => 'getDigitalItems',
        'gift_certificates' => 'getGiftCertificates'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->container['physical_items'] = array_key_exists('physical_items', $data) ? $data['physical_items'] : null;
        $this->container['digital_items'] = array_key_exists('digital_items', $data) ? $data['digital_items'] : null;
        $this->container['gift_certificates'] = array_key_exists('gift_certificates', $data) ? $data['gift_certificates'] : null;
    }

    /**
     * returns container
     * @return array
     */
    public function get()
    {
        return $this->container;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['physical_items'] === null) {
            $invalid_properties[] = "'physical_items' can't be null";
        }
        if ($this->container['digital_items'] === null) {
            $invalid_properties[] = "'digital_items' can't be null";
        }
        if ($this->container['gift_certificates'] === null) {
            $invalid_properties[] = "'gift_certificates' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['physical_items'] === null) {
            return false;
        }
        if ($this->container['digital_items'] === null) {
            return false;
        }
        if ($this->container['gift_certificates'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets physical_items
     * @return \BigCommerce\Api\v3\Model\ItemPhysical[]
     */
    public function getPhysicalItems()
    {
        return $this->container['physical_items'];
    }

    /**
     * Sets physical_items
     * @param \BigCommerce\Api\v3\Model\ItemPhysical[] $physical_items
     * @return $this
     */
    public function setPhysicalItems($physical_items)
    {
        $this->container['physical_items'] = $physical_items;

        return $this;
    }

    /**
     * Gets digital_items
     * @return \BigCommerce\Api\v3\Model\ItemDigital[]
     */
    public function getDigitalItems()
    {
        return $this->container['digital_items'];
    }

    /**
     * Sets digital_items
     * @param \BigCommerce\Api\v3\Model\ItemDigital[] $digital_items
     * @return $this
     */
    public function setDigitalItems($digital_items)
    {
        $this->container['digital_items'] = $digital_items;

        return $this;
    }

    /**
     * Gets gift_certificates
     * @return \BigCommerce\Api\v3\Model\ItemGiftCertificate[]
     */
    public function getGiftCertificates()
    {
        return $this->container['gift_certificates'];
    }

    /**
     * Sets gift_certificates
     * @param \BigCommerce\Api\v3\Model\ItemGiftCertificate[] $gift_certificates
     * @return $this
     */
    public function setGiftCertificates($gift_certificates)
    {
        $this->container['gift_certificates'] = $gift_certificates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\v3\ObjectSerializer::sanitizeForSerialization($this));
    }
}


