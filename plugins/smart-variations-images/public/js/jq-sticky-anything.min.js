/**
 * @preserve Sticky Anything 2.22 | @senff | GPL2 Licensed
 */
! function($) {
    function stickIt(stickyTop, minwidth, maxwidth, stickyZindex, pushup, adminbar, originalAssignedStyles, originalInlineStyles) { if (!($(".sticky-element-active").length < 1)) { $listenerElement = $(".sticky-element-active"); var orgElementPos = $listenerElement.offset(); if (orgElementTop = orgElementPos.top, pushup) { var pushElementPos = $(pushup).offset();
                pushElementTop = pushElementPos.top } var e = window,
                a = "inner"; if ("innerWidth" in window || (a = "client", e = document.documentElement || document.body), viewport = e[a + "Width"], adminbar && $("body").hasClass("admin-bar") && viewport > 600 ? adminBarHeight = $("#wpadminbar").height() : adminBarHeight = 0, $(window).scrollTop() >= orgElementTop - stickyTop - adminBarHeight && viewport >= minwidth && viewport <= maxwidth) { for (var importantStyle in coordsOrgElement = $listenerElement.offset(), leftOrgElement = coordsOrgElement.left, widthPlaceholder = $listenerElement[0].getBoundingClientRect().width, widthPlaceholder || (widthPlaceholder = $listenerElement.css("width")), heightPlaceholder = $listenerElement[0].getBoundingClientRect().height, heightPlaceholder || (heightPlaceholder = $listenerElement.css("height")), widthSticky = $(".sticky-element-original").css("width"), "0px" == widthSticky && (widthSticky = $(".sticky-element-original")[0].getBoundingClientRect().width), heightSticky = $(".sticky-element-original").height(), paddingOrgElement = [$(".sticky-element-original").css("padding-top"), $(".sticky-element-original").css("padding-right"), $(".sticky-element-original").css("padding-bottom"), $(".sticky-element-original").css("padding-left")], paddingSticky = paddingOrgElement[0] + " " + paddingOrgElement[1] + " " + paddingOrgElement[2] + " " + paddingOrgElement[3], marginOrgElement = [$listenerElement.css("margin-top"), $listenerElement.css("margin-right"), $listenerElement.css("margin-bottom"), $listenerElement.css("margin-left")], marginPlaceholder = marginOrgElement[0] + " " + marginOrgElement[1] + " " + marginOrgElement[2] + " " + marginOrgElement[3], assignedStyles = "", originalAssignedStyles) "inline" == originalAssignedStyles[importantStyle] ? assignedStyles += importantStyle + ":inline-block; " : assignedStyles += importantStyle + ":" + originalAssignedStyles[importantStyle] + "; ";
                elementHeight = 0, heightPlaceholder < 1 ? elementHeight = $(".sticky-element-cloned").outerHeight() : elementHeight = $(".sticky-element-original").outerHeight(), pushup && $(window).scrollTop() > pushElementTop - stickyTop - elementHeight - adminBarHeight ? stickyTopMargin = pushElementTop - stickyTop - elementHeight - $(window).scrollTop() : stickyTopMargin = adminBarHeight, assignedStyles += "width:" + widthPlaceholder + "px; height:" + heightPlaceholder + "px; margin:" + marginPlaceholder + ";", $(".sticky-element-original").removeClass("sticky-element-active").removeClass("element-is-not-sticky").addClass("element-is-sticky").css("cssText", originalInlineStyles + "margin-top: " + stickyTopMargin + "px !important; margin-left: 0 !important").css("position", "fixed").css("left", leftOrgElement + "px").css("top", stickyTop + "px").css("width", widthSticky).css("padding", paddingSticky).css("z-index", stickyZindex), $(".sticky-element-placeholder").hasClass("sticky-element-active") || $(".sticky-element-placeholder").addClass("sticky-element-active").attr("style", assignedStyles) } else $(".sticky-element-original").addClass("sticky-element-active").removeClass("element-is-sticky").addClass("element-is-not-sticky").attr("style", originalInlineStyles), $(".sticky-element-placeholder").hasClass("sticky-element-active") && $(".sticky-element-placeholder").removeClass("sticky-element-active").removeAttr("style").css("width", "0").css("height", "0").css("margin", "0").css("padding", "0") } }

    function createPlaceholder() { $(".sticky-element-original").addClass("sticky-element-active").before('<div class="sticky-element-placeholder" style="width:0; height:0; margin:0; padding:0; visibility:hidden;"></div>') }

    function cssStyles(el) { return o = {}, o.display = el.css("display"), o.float = el.css("float"), o.flex = el.css("flex"), o["box-sizing"] = el.css("box-sizing"), o.clear = el.css("clear"), o.overflow = el.css("overflow"), o.transform = el.css("transform"), o }

    function stickItLegacy(stickyTop, minwidth, maxwidth, stickyZindex, pushup, dynamic, adminbar) { if (!($(".sticky-element-original").length < 1)) { var orgElementPos = $(".sticky-element-original").offset(); if (orgElementTop = orgElementPos.top, pushup) { var pushElementPos = $(pushup).offset();
                pushElementTop = pushElementPos.top } var e = window,
                a = "inner"; "innerWidth" in window || (a = "client", e = document.documentElement || document.body), viewport = e[a + "Width"], adminbar && $("body").hasClass("admin-bar") && viewport > 600 ? adminBarHeight = $("#wpadminbar").height() : adminBarHeight = 0, $(window).scrollTop() >= orgElementTop - stickyTop - adminBarHeight && viewport >= minwidth && viewport <= maxwidth ? (orgElement = $(".sticky-element-original"), coordsOrgElement = orgElement.offset(), leftOrgElement = coordsOrgElement.left, widthOrgElement = orgElement[0].getBoundingClientRect().width, widthOrgElement || (widthOrgElement = orgElement.css("width")), heightOrgElement = orgElement.outerHeight(), paddingOrgElement = [orgElement.css("padding-top"), orgElement.css("padding-right"), orgElement.css("padding-bottom"), orgElement.css("padding-left")], paddingCloned = paddingOrgElement[0] + " " + paddingOrgElement[1] + " " + paddingOrgElement[2] + " " + paddingOrgElement[3], 1 == dynamic && $(".sticky-element-cloned").length < 1 && createClone(stickyTop, stickyZindex), elementHeight = 0, heightOrgElement < 1 ? elementHeight = $(".sticky-element-cloned").outerHeight() : elementHeight = $(".sticky-element-original").outerHeight(), pushup && $(window).scrollTop() > pushElementTop - stickyTop - elementHeight - adminBarHeight ? stickyTopMargin = pushElementTop - stickyTop - elementHeight - $(window).scrollTop() : stickyTopMargin = adminBarHeight, $(".sticky-element-cloned").css("left", leftOrgElement + "px").css("top", stickyTop + "px").css("width", widthOrgElement).css("margin-top", stickyTopMargin).css("padding", paddingCloned).show(), $(".sticky-element-original").css("visibility", "hidden")) : (1 == dynamic ? $(".sticky-element-cloned").remove() : $(".sticky-element-cloned").hide(), $(".sticky-element-original").css("visibility", "visible")) } }

    function createClone(cloneTop, cloneZindex) { $(".sticky-element-original").clone().insertAfter($(".sticky-element-original")).addClass("sticky-element-cloned").removeClass("element-is-not-sticky").addClass("element-is-sticky").css("position", "fixed").css("top", cloneTop + "px").css("margin-left", "0").css("z-index", cloneZindex).removeClass("sticky-element-original").hide() }
    $.fn.stickThis = function(options) { var settings = $.extend({ top: 0, minscreenwidth: 0, maxscreenwidth: 99999, zindex: 1, legacymode: !1, dynamicmode: !1, debugmode: !1, pushup: "", adminbar: !1 }, options),
            numElements = $(this).length,
            numPushElements = $(settings.pushup).length; return numPushElements < 1 ? (1 == settings.debugmode && settings.pushup && console.error('STICKY ANYTHING DEBUG: There are no elements with the selector/class/ID you selected for the Push-up element ("' + settings.pushup + '").'), settings.pushup = "") : numPushElements > 1 && (1 == settings.debugmode && console.error("STICKY ANYTHING DEBUG: There are " + numPushElements + ' elements on the page with the selector/class/ID you selected for the push-up element ("' + settings.pushup + '"). You can select only ONE element to push the sticky element up.'), settings.pushup = ""), numElements < 1 ? 1 == settings.debugmode && console.error('STICKY ANYTHING DEBUG: There are no elements with the selector/class/ID you selected for the sticky element ("' + this.selector + '").') : numElements > 1 ? 1 == settings.debugmode && console.error("STICKY ANYTHING DEBUG: There There are " + numPushElements + ' elements with the selector/class/ID you selected for the sticky element ("' + this.selector + '"). You can only make ONE element sticky.') : 1 == settings.legacymode ? ($(this).addClass("sticky-element-original").addClass("element-is-not-sticky"), 1 != settings.dynamicmode && createClone(settings.top, settings.zindex, settings.adminbar), checkElement = setInterval((function() { stickItLegacy(settings.top, settings.minscreenwidth, settings.maxscreenwidth, settings.zindex, settings.pushup, settings.dynamicmode, settings.adminbar) }), 10)) : ($(this).addClass("sticky-element-original").addClass("element-is-not-sticky"), orgAssignedStyles = cssStyles($(this)), orgInlineStyles = $(".sticky-element-original").attr("style"), null == orgInlineStyles && (orgInlineStyles = ""), createPlaceholder(), checkElement = setInterval((function() { stickIt(settings.top, settings.minscreenwidth, settings.maxscreenwidth, settings.zindex, settings.pushup, settings.adminbar, orgAssignedStyles, orgInlineStyles) }), 10)), this } }(jQuery);