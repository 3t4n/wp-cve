{"mappings":"6DAaA,IACMA,EADY,0DACSC,MAAM,KAY1B,SAASC,EAAiBC,EAAOC,GACtC,IAAMC,EAAgBD,GAAW,CAAC,EAElC,IAAKD,EAAO,MAAO,GAEnB,IAAMG,EAAOD,EAAcE,WAAaP,EAClCQ,EAAOH,EAAcI,WAG3B,OAAON,EACJF,MAHc,uBAIdS,KAAI,SAACC,EAAMC,EAAOC,GAEjB,GAAID,EAAQ,EACV,MAAI,MAAME,KAAKH,GAAcH,EAAOG,EAAO,IACpCA,EAGT,IAAMI,EAAQJ,EAAKK,cAEnB,OAAc,IAAVJ,GAAeA,IAAUC,EAAII,OAAS,GAAKX,EAAKY,SAASH,GACpDA,EAaf,SAAoBZ,GAClB,OAAOA,EAAMgB,OAAO,GAAGC,cAAgBjB,EAAMkB,MAAM,EACrD,CAZaC,CAAWX,EACpB,IACCY,KAAK,GACV,C,SCnDAC,OAAOC,eAAeC,EAAS,aAAc,CACzCvB,OAAO,IAEXuB,EAAQ,QAER,SAAkBC,GAEd,SAASC,IACLC,SAASC,oBAAoB,mBAAoBF,GAAW,GAC5DG,OAAOD,oBAAoB,OAAQF,GAAW,GAC9CD,GACJ,CAI4B,aAAxBE,SAASG,WAETC,WAAWN,IAIXE,SAASK,iBAAiB,mBAAoBN,GAAW,GAGzDG,OAAOG,iBAAiB,OAAQN,GAAW,GAEnD,EAEAF,EAAiBA,EAAQ,QC3BzB,IAAMS,EAAkB,SAAAC,GAGpB,QAA4BC,IAAvBD,EAAGE,iBACCF,EAAGE,kBAAoBF,EAAGjC,MAAMa,cADzC,CAOA,IAAIuB,EACEC,EAAaX,SAASY,gBAAkBL,EACzCI,IACDD,EAAYH,EAAGM,gBAInBN,EAAGjC,MAAQD,EAAYkC,EAAGjC,OAC1BiC,EAAGE,gBAAkBF,EAAGjC,MAAMa,cAEzBwB,GACDJ,EAAGO,kBAAmBJ,EAAWA,EAdrC,CAgBJ,EAEAK,EAAAlB,EAAA,EAAU,WACSG,SAASgB,iBAAkB,2BACnCC,SAAS,SAAAV,GACZ,IAAIW,EAAU,KACdX,EAAGF,iBAAkB,SAAS,WAC1Bc,aAAcD,GACdA,EAAUd,YAAY,WAClBE,EAAiBC,EACrB,GAAG,IACP,IACAA,EAAGF,iBAAkB,WAAW,WAC5Bc,aAAcD,EAClB,IACAX,EAAGF,iBAAkB,UAAU,WAC3BC,EAAiBC,EACrB,IACAA,EAAGF,iBAAkB,QAAQ,WACzBC,EAAiBC,EACrB,GACJ,GACJ,G","sources":["node_modules/ap-style-title-case/index.js","node_modules/es6-docready/lib/doc-ready.js","src/classic.js"],"sourcesContent":["/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [keepSpaces=false]\n *   Keep superfluous whitespace.\n *   Whitespace is turned into a space by default.\n * @property {Array<string>} [stopwords]\n *   List of stopwords.\n *   When a lowercased word is included in this list, it will be used as\n *   lowercase.\n *   Otherwise words are capitalized.\n */\n\nconst stopwords = 'a an and at but by for in nor of on or so the to up yet'\nconst defaults = stopwords.split(' ')\n\n/**\n * Convert a value to AP/APA title case.\n *\n * @param {string} [value]\n *   Short text of unknown casing.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Title-cased version of `value`.\n */\nexport function apStyleTitleCase(value, options) {\n  const configuration = options || {}\n\n  if (!value) return ''\n\n  const stop = configuration.stopwords || defaults\n  const keep = configuration.keepSpaces\n  const splitter = /(\\s+|[-‑–—,:;!?()])/\n\n  return value\n    .split(splitter)\n    .map((word, index, all) => {\n      // The splitter:\n      if (index % 2) {\n        if (/\\s+/.test(word)) return keep ? word : ' '\n        return word\n      }\n\n      const lower = word.toLowerCase()\n\n      if (index !== 0 && index !== all.length - 1 && stop.includes(lower)) {\n        return lower\n      }\n\n      return capitalize(word)\n    })\n    .join('')\n}\n\n/**\n *\n * @param {string} value\n * @returns {string}\n */\nfunction capitalize(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1)\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports[\"default\"] = docReady;\n\nfunction docReady(callback) {\n\n    function completed() {\n        document.removeEventListener(\"DOMContentLoaded\", completed, false);\n        window.removeEventListener(\"load\", completed, false);\n        callback();\n    }\n\n    //Events.on(document, 'DOMContentLoaded', completed)\n\n    if (document.readyState === \"complete\") {\n        // Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeout(callback);\n    } else {\n\n        // Use the handy event callback\n        document.addEventListener(\"DOMContentLoaded\", completed, false);\n\n        // A fallback to window.onload, that will always work\n        window.addEventListener(\"load\", completed, false);\n    }\n}\n\nmodule.exports = exports[\"default\"];","import { apStyleTitleCase as capitalize } from 'ap-style-title-case'\nimport DocReady from 'es6-docready'\n\nconst capitalizeInput = el => {\n\n    // Remember old value so we can allow manual case edits.\n    if ( el.oldLowerCaseVal !== undefined ) {\n        if ( el.oldLowerCaseVal === el.value.toLowerCase() ) {\n            return\n        }\n    }\n\n    // Remember caret position, and bring it back later.\n    let cursorPos\n    const isSelected = document.activeElement === el\n    if ( isSelected ) {\n        cursorPos = el.selectionStart;\n    }\n    \n    // Capitalize!\n    el.value = capitalize( el.value )\n    el.oldLowerCaseVal = el.value.toLowerCase()\n\n    if ( isSelected ) {\n        el.setSelectionRange( cursorPos, cursorPos );\n    }\n}\n\nDocReady( () => {\n    const inputs = document.querySelectorAll( 'input[name=\"post_title\"' );\n    inputs.forEach( el => {\n        let timeout = null\n        el.addEventListener( 'keyup', () => {\n            clearTimeout( timeout );\n            timeout = setTimeout( () => {\n                capitalizeInput( el )\n            }, 1000 )\n        } )\n        el.addEventListener( 'keydown', () => {\n            clearTimeout( timeout );\n        } )\n        el.addEventListener( 'change', () => {\n            capitalizeInput( el )\n        } )\n        el.addEventListener( 'blur', () => {\n            capitalizeInput( el )\n        } )\n    } )\n} )"],"names":["$8af9d727b4c09fd1$var$defaults","split","$8af9d727b4c09fd1$export$d43fa36570dad8c","value","options","configuration","stop","stopwords","keep","keepSpaces","map","word","index","all","test","lower","toLowerCase","length","includes","charAt","toUpperCase","slice","$8af9d727b4c09fd1$var$capitalize","join","Object","defineProperty","$8d974b8b3819cfcc$exports","callback","completed","document","removeEventListener","window","readyState","setTimeout","addEventListener","$53f1dd2d6d32963f$var$capitalizeInput","el","undefined","oldLowerCaseVal","cursorPos","isSelected","activeElement","selectionStart","setSelectionRange","$parcel$interopDefault","querySelectorAll","forEach","timeout","clearTimeout"],"version":3,"file":"classic.js.map"}