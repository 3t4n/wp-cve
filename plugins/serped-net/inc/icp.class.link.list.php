<?phpif ( !defined( 'ABSPATH' ) ) exit; if (!class_exists('WP_List_Table')) {    require_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );}class SRPD_Link_List_Table extends WP_List_Table {    function __construct() {        global $status, $page;        //Set parent defaults        parent::__construct(array(            'singular' => 'link', //singular name of the listed records            'plural' => 'links', //plural name of the listed records            'ajax' => false        //does this table support ajax?        ));    }    function column_default($item, $column_name) {        switch ($column_name) {            case 'url':            case 'slug':            case 'clicks':                return $item[$column_name];            default:                return print_r($item, true); //Show the whole array for troubleshooting purposes        }    }    function column_url($item) {        //Build row actions        $actions = array(            'edit' => sprintf('<a href="?page=%s&id=%s&action=%s">Edit</a>', 'icp_auto_link_edit', $item['id'], 'edit'),            'delete' => sprintf('<a href="?page=%s&id=%s&slug=%s&action=%s">Delete</a>', 'icp_auto_link_edit', $item['id'], $item['slug'], 'delete'),        );        //Return the title contents        return sprintf('<a href="%1$s">%2$s</a> <span style="color:silver"></span>%3$s',                /* $1%s */ $item['url'],                $item['url'],                /* $2%s */ $this->row_actions($actions)        );    }    function column_slug($item) {        return sprintf('<input type="text" value="%s" style="width: 100%%;" onClick="this.select();" /><br /><span>Click on the link and press: Ctrl/Cmd + C to Copy</span>', $item['shortlink_url'] . "/" . $item['slug']);    }    function column_cb($item) {        return sprintf(                '<input type="checkbox" name="%1$s[]" value="%2$s" />',                /* $1%s */ $this->_args['singular'], //Let's simply repurpose the table's singular label ("movie")                /* $2%s */ $item['id']                //The value of the checkbox should be the record's id        );    }    function column_clicks($item) {        $actions = array(            'full_stats' => sprintf('<a href="?page=%s&id=%s">Full Stats</a>', 'icp_shortlink_stats', $item['id'])        );        $signature = SHORTLINK_SIG;        $slug = $item['slug'];        $format = 'json';        $api_url = SHORTLINK_URL . '/yourls-api.php';        $dataArray = array(            'shorturl' => $slug,            'format' => $format,            'action' => 'url-stats',            'signature' => $signature        );        $result = wp_remote_post($api_url, $dataArray);        $data = wp_remote_retrieve_body($result);        $dataObj = json_decode($data);        $clicks = ($dataObj->statusCode == 200) ? $dataObj->link->clicks : 0;        return sprintf('%1$s %2$s',                $clicks,                $this->row_actions($actions)        );    }    function get_columns() {        $columns = array(            'url' => 'Url',            'slug' => 'Slug',            'clicks' => 'Number of Clicks'        );        return $columns;    }    function get_sortable_columns() {        $sortable_columns = array(            'url' => array('url', false), //true means it's already sorted            'slug' => array('slug', false)        );        return $sortable_columns;    }    function get_bulk_actions() {        $actions = array(// 				'delete'    => 'Delete'        );        return $actions;    }    function process_bulk_action() {        //Detect when a bulk action is being triggered...        if ('delete' === $this->current_action()) {            wp_die('Items deleted (or they would be if we had items to delete)!');        }    }    function prepare_items() {        global $wpdb; //This is used only if making any database queries        $per_page = 10;        $columns = $this->get_columns();        $hidden = array();        $sortable = $this->get_sortable_columns();        $this->_column_headers = array($columns, $hidden, $sortable);        $this->process_bulk_action();        $data = $wpdb->get_results('SELECT * FROM ' . $wpdb->prefix . 'icp_links', 'ARRAY_A');        function usort_reorder($a, $b) {            $orderby = (!empty($_REQUEST['orderby'])) ? sanitize_text_field($_REQUEST['orderby']) : 'title'; //If no sort, default to title            $order = (!empty($_REQUEST['order'])) ? sanitize_text_field($_REQUEST['order']) : 'asc'; //If no order, default to asc            $result = strcmp($a[$orderby], $b[$orderby]); //Determine sort order            return ($order === 'asc') ? $result : -$result; //Send final sort direction to usort        }        usort($data, 'usort_reorder');        $current_page = $this->get_pagenum();        $total_items = count($data);        $data = array_slice($data, (($current_page - 1) * $per_page), $per_page);        $this->items = $data;        $this->set_pagination_args(array(            'total_items' => $total_items, //WE have to calculate the total number of items            'per_page' => $per_page, //WE have to determine how many items to show on a page            'total_pages' => ceil($total_items / $per_page)   //WE have to calculate the total number of pages        ));    }}?>