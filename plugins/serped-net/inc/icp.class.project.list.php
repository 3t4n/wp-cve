<?phpif ( !defined( 'ABSPATH' ) ) exit; if (!class_exists('WP_List_Table')) {    require_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );}class SRPD_Project_List_Table extends WP_List_Table {    function __construct() {        global $status, $page;        //Set parent defaults        parent::__construct(array(            'singular' => 'project', //singular name of the listed records            'plural' => 'projects', //plural name of the listed records            'ajax' => false        //does this table support ajax?        ));    }    function column_default($item, $column_name) {        switch ($column_name) {            case 'project_name':            case 'filter':            case 'options':            case 'max_replace':            case 'keywords':                return $item[$column_name];            default:                return print_r($item, true); //Show the whole array for troubleshooting purposes        }    }    function column_project_name($item) {        //Build row actions        $actions = array(            'edit' => sprintf('<a href="?page=%s&id=%s&action=%s">Edit</a>', 'icp_link_projects_edit', $item['id'], 'edit'),            'delete' => sprintf('<a href="?page=%s&id=%s&action=%s" class="delete_link_projects">Delete</a>', 'icp_link_projects_edit', $item['id'], 'delete'),        );        //Return the title contents        return sprintf('%1$s <span style="color:silver"></span>%2$s',                /* $1%s */ esc_html($item['project_name']),                /* $2%s */ $this->row_actions($actions)        );    }    function column_filter($item) {        $pages = ( $item['pages'] == 1 ) ? 'YES' : 'NO';        $posts = ( $item['posts'] == 1 ) ? 'YES' : 'NO';        $new = ( $item['new'] == 1 ) ? 'YES' : 'NO';        $existing = ( $item['existing'] == 1 ) ? 'YES' : 'NO';        return sprintf("<table>                            <tr><td>Posts:</td><td>%s</td></tr>                            <tr><td>Pages:</td><td>%s</td></tr>                            <tr><td>Existing Content:</td><td>%s</td></tr>                            <tr><td>New Content:</td><td>%s</td></tr>                     </table>", $posts, $pages, $existing, $new);    }    function column_options($item) {        $comments = ( $item['comments'] == 1 ) ? 'YES' : 'NO';        $blank = ( $item['new_window'] == 1 ) ? 'YES' : 'NO';        $titles = ( $item['headings'] == 1 ) ? 'YES' : 'NO';        $nofollow = $item['no_follow_weight'];        return sprintf("<table>                            <tr><td>Hyperlink Comments:</td><td>%s</td></tr>                            <tr><td>Open in new tab:</td><td>%s</td></tr>                            <tr><td>Hyperlink Headings:</td><td>%s</td></tr>                            <tr><td>No-follow weight:</td><td>%s%%</td></tr>                     </table>", $comments, $blank, $titles, $nofollow);    }    function column_max_replace($item) {        return '<p style="text-align: center;">' . $item['max_replace'] . '</p>';    }    function column_keywords($item) {        global $wpdb;        $table_name = $wpdb->prefix . "icp_project_keywords";        $results = $wpdb->get_results("SELECT keyword FROM $table_name WHERE id_project_fk = " . $item['id'], 'OBJECT');        $keywords = "";        foreach ($results as $keyword) {            $keywords .= '&bull; ' . $keyword->keyword . "<br/> ";        };        $keywords = '<div style="height:130px; overflow:auto">' . $keywords . "</div>";        return $keywords;    }    function column_cb($item) {        return sprintf(                '<input type="checkbox" name="%1$s[]" value="%2$s" />',                /* $1%s */ $this->_args['singular'],                /* $2%s */ $item['id']        );    }    function get_columns() {        $columns = array(            'project_name' => 'Project Name',            'filter' => 'Filter',            'options' => 'Other Options',            'max_replace' => 'Max. Links to Replace',            'keywords' => 'Keywords'        );        return $columns;    }    function get_sortable_columns() {        $sortable_columns = array(            'project_name' => array('project_name', false),            'max_replace' => array('max_replace', false)        );        return $sortable_columns;    }    function get_bulk_actions() {        $actions = array(                // 				'delete'    => 'Delete'        );        return $actions;    }    function process_bulk_action() {        //Detect when a bulk action is being triggered...        if ('delete' === $this->current_action()) {            wp_die('Items deleted (or they would be if we had items to delete)!');        }    }    function prepare_items() {        global $wpdb; //This is used only if making any database queries        $per_page = 10;        $columns = $this->get_columns();        $hidden = array();        $sortable = $this->get_sortable_columns();        $this->_column_headers = array($columns, $hidden, $sortable);        $this->process_bulk_action();        $data = $wpdb->get_results('SELECT * FROM ' . $wpdb->prefix . 'icp_projects', 'ARRAY_A');        function usort_reorder($a, $b) {            $orderby = (!empty($_REQUEST['orderby'])) ? sanitize_text_field($_REQUEST['orderby']) : 'title'; //If no sort, default to title            $order = (!empty($_REQUEST['order'])) ? sanitize_text_field($_REQUEST['order']) : 'asc'; //If no order, default to asc            $result = strcmp($a[$orderby], $b[$orderby]); //Determine sort order            return ($order === 'asc') ? $result : -$result; //Send final sort direction to usort        }        usort($data, 'usort_reorder');        $current_page = $this->get_pagenum();        $total_items = count($data);        $data = array_slice($data, (($current_page - 1) * $per_page), $per_page);        $this->items = $data;        $this->set_pagination_args(array(            'total_items' => $total_items, //WE have to calculate the total number of items            'per_page' => $per_page, //WE have to determine how many items to show on a page            'total_pages' => ceil($total_items / $per_page)   //WE have to calculate the total number of pages        ));    }}?>