(()=>{"use strict";const e=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)},t=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)},n=function(n,o){return function(s,i,r){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;const c=n[o];if(!t(s))return;if(!e(i))return;if("function"!=typeof r)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const l={callback:r,priority:a,namespace:i};if(c[s]){const e=c[s].handlers;let t;for(t=e.length;t>0&&!(a>=e[t-1].priority);t--);t===e.length?e[t]=l:e.splice(t,0,l),c.__current.forEach((e=>{e.name===s&&e.currentIndex>=t&&e.currentIndex++}))}else c[s]={handlers:[l],runs:0};"hookAdded"!==s&&n.doAction("hookAdded",s,i,r,a)}},o=function(n,o){let s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(i,r){const a=n[o];if(!t(i))return;if(!s&&!e(r))return;if(!a[i])return 0;let c=0;if(s)c=a[i].handlers.length,a[i]={runs:a[i].runs,handlers:[]};else{const e=a[i].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===r&&(e.splice(t,1),c++,a.__current.forEach((e=>{e.name===i&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==i&&n.doAction("hookRemoved",i,r),c}},s=function(e,t){return function(n,o){const s=e[t];return void 0!==o?n in s&&s[n].handlers.some((e=>e.namespace===o)):n in s}},i=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(o){const s=e[t];s[o]||(s[o]={handlers:[],runs:0}),s[o].runs++;const i=s[o].handlers;for(var r=arguments.length,a=new Array(r>1?r-1:0),c=1;c<r;c++)a[c-1]=arguments[c];if(!i||!i.length)return n?a[0]:void 0;const l={name:o,currentIndex:0};for(s.__current.push(l);l.currentIndex<i.length;){const e=i[l.currentIndex].callback.apply(null,a);n&&(a[0]=e),l.currentIndex++}return s.__current.pop(),n?a[0]:void 0}},r=function(e,t){return function(){var n,o;const s=e[t];return null!==(n=null===(o=s.__current[s.__current.length-1])||void 0===o?void 0:o.name)&&void 0!==n?n:null}},a=function(e,t){return function(n){const o=e[t];return void 0===n?void 0!==o.__current[0]:!!o.__current[0]&&n===o.__current[0].name}},c=function(e,n){return function(o){const s=e[n];if(t(o))return s[o]&&s[o].runs?s[o].runs:0}};class l{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=n(this,"actions"),this.addFilter=n(this,"filters"),this.removeAction=o(this,"actions"),this.removeFilter=o(this,"filters"),this.hasAction=s(this,"actions"),this.hasFilter=s(this,"filters"),this.removeAllActions=o(this,"actions",!0),this.removeAllFilters=o(this,"filters",!0),this.doAction=i(this,"actions"),this.applyFilters=i(this,"filters",!0),this.currentAction=r(this,"actions"),this.currentFilter=r(this,"filters"),this.doingAction=a(this,"actions"),this.doingFilter=a(this,"filters"),this.didAction=c(this,"actions"),this.didFilter=c(this,"filters")}}const u=new l,{addAction:d,addFilter:h,removeAction:f,removeFilter:m,hasAction:p,hasFilter:g,removeAllActions:b,removeAllFilters:y,doAction:_,applyFilters:v,currentAction:F,currentFilter:S,doingAction:w,doingFilter:A,didAction:z,didFilter:D,actions:P,filters:k}=u;function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}SB_Customizer.initPromise=new Promise((function(e){var t;SB_Customizer.extraData=C(C({},SB_Customizer.extraData),{},{allFeedsScreen:sbc_builder.allFeedsScreen,feedsList:sbc_builder.feeds,legacyFeedsList:sbc_builder.legacyFeeds,tooltipContent:sbc_builder.feedtypesTooltipContent,feedSettingsDomOptions:null,selectedFeedModel:{channel:sbc_builder.prefilledChannelId,playlist:"",favorites:sbc_builder.prefilledChannelId,search:"",live:sbc_builder.prefilledChannelId,single:"",apiKey:"",accessToken:""},youtubeAccountConnectURL:sbc_builder.youtubeAccountConnectURL,connectSiteParameters:sbc_builder.youtubeAccountConnectParameters,prefilledChannelId:sbc_builder.prefilledChannelId,dismissLite:sbc_builder.youtube_feed_dismiss_lite,shouldShowFeedAPIForm:!1,shouldShowManualConnect:!1,sw_feed:!1,sw_feed_id:!1}),SB_Customizer.extraMethods=C(C({},SB_Customizer.extraMethods),{},(t={changeSettingValue:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=this;n&&(s.customizerFeedData.settings[e]=t),!1!==o&&s.customizerControlAjaxAction(o,e),s.regenerateLayout(e)},checkExtensionActive:function(e){return this.activeExtensions[e]},shouldShowOverlay:function(e){var t=this;return t.sbyIsPro&&!t.sbyLicenseNoticeActive&&("call_to_action"!=e.checkExtensionPopup&&"advancedFilters"!=e.checkExtensionPopup||t.hasFeature("call_to_actions")&&t.hasFeature("advancedFilters"))?(null!=e.condition||null!=e.checkExtension||null!=e.checkExtensionDimmed)&&!t.checkControlCondition(e.condition,e.checkExtension,e.checkExtensionDimmed):null!=e.checkExtensionPopup||(null!=e.condition||null!=e.checkExtension||null!=e.checkExtensionDimmed)&&!t.checkControlCondition(e.condition,e.checkExtension,e.checkExtensionDimmed)},shouldShowTogglesetCover:function(e){var t=this;return!(t.sbyIsPro&&!t.sbyLicenseNoticeActive||null==e.checkExtension||t.checkExtensionActive(e.checkExtension))},togglesetExtPopup:function(e){this.viewsActive.extensionsPopupElement=e.checkExtension},regenerateLayout:function(e){var t=this;["layout","carouselarrows","carouselpag","carouselautoplay","carouseltime","carouselloop","carouselrows","cols","colstablet","colsmobile","imagepadding"].includes(e)&&setTimeout((function(){t.setShortcodeGlobalSettings(!0)}),200)},backToAllFeeds:function(){var e=this;JSON.stringify(e.customizerFeedDataInitial)===JSON.stringify(e.customizerFeedData)?window.location=e.builderUrl:e.openDialogBox("backAllToFeed")},openDialogBox:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=this,o=n.dialogBoxPopupScreen[e].heading,s=n.dialogBoxPopupScreen[e].description,i=n.dialogBoxPopupScreen[e].customButtons;"deleteSingleFeed"===e&&(n.feedToDelete=t,o=o.replace("#",n.feedToDelete.feed_name)),n.dialogBox={active:!0,type:e,heading:o,description:s,customButtons:i},window.event.stopPropagation()},confirmDialogAction:function(){var e=this;switch(e.dialogBox.type){case"deleteSingleFeed":e.feedActionDelete([e.feedToDelete.id]);break;case"deleteMultipleFeeds":e.feedActionDelete(e.feedsSelected);break;case"backAllToFeed":window.location=e.builderUrl}},feedActionDelete:function(e){var t=this,n={action:"sby_feed_saver_manager_delete_feeds",feeds_ids:e};t.ajaxPost(n,(function(e){var n=e.data;t.feedsList=Object.values(Object.assign({},n)),t.feedsSelected=[]}))},showColorPickerPospup:function(e){this.customizerScreens.activeColorPicker=e},hideColorPickerPopup:function(){this.customizerScreens.activeColorPicker=null},getPaletteClass:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=this,n=t.customizerFeedData.settings.colorpalette;if(t.checkNotEmpty(n)){var o="custom"===n?"_"+t.customizerFeedData.feed_info.id:"";return console.log("inherit"!==n?" sby"+e+"_palette_"+n+o:""),"inherit"!==n?" sby"+e+"_palette_"+n+o:""}return""},checkNotEmpty:function(e){return null!=e&&""!=e.replace(/ /gi,"")},getFeedContainerClasses:function(){var e=this;return["sb_youtube","sby_layout_"+e.customizerFeedData.settings.layout,"sby_col_"+e.getColSettings(),"sby_mob_col_"+e.getMobColSettings(),"sby_palette_"+e.getColorPaletteClass()].join(" ")},getColorPaletteClass:function(){var e=this;return"custom"==e.customizerFeedData.settings.colorpalette?e.customizerFeedData.settings.colorpalette+"_"+e.customizerFeedData.feed_info.id:e.customizerFeedData.settings.colorpalette},getColSettings:function(){var e=this;return"list"==e.customizerFeedData.settings.layout||"mobile"===e.customizerScreens.previewScreen?0:e.customizerFeedData.settings.cols?e.customizerFeedData.settings.cols:0},getMobColSettings:function(){var e=this;return"list"==e.customizerFeedData.settings.layout?0:e.customizerFeedData.settings.colsmobile?e.customizerFeedData.settings.colsmobile:0},checkShouldShowSubscribers:function(){return 1==this.customizerFeedData.settings.showsubscribe?"shown":""},shouldShowIndividualElements:function(e){return console.log(e),!1},valueIsEnabled:function(e){return 1==e||1==e||"true"==e||"on"==e},changeSwitcherSettingValue:function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4?arguments[4]:void 0,i=this;console.log(s),Object.keys(i.inActiveExtensions).includes(e)&&(i.viewsActive.extensionsPopupElement=i.inActiveExtensions[e]),i.customizerFeedData.settings[e]=i.customizerFeedData.settings[e]==t?n:t,!1!==o&&i.customizerControlAjaxAction(o),i.regenerateLayout(e)},jsonParse:function(e){try{return JSON.parse(e)}catch(e){return!1}},getCustomHeaderText:function(){return this.customizerFeedData.settings.customheadertext},shouldShowStandardHeader:function(){return this.customizerFeedData.settings.showheader&&"standard"===this.customizerFeedData.settings.headerstyle},shouldShowTextHeader:function(){return this.customizerFeedData.settings.showheader&&"text"===this.customizerFeedData.settings.headerstyle},getFlagsAttr:function(){var e=this,t=[];return e.customizerFeedData.settings.disable_resize&&t.push("resizeDisable"),e.customizerFeedData.settings.favor_local&&t.push("favorLocal"),e.customizerFeedData.settings.disable_js_image_loading&&t.push("imageLoadDisable"),e.customizerFeedData.settings.ajax_post_load&&t.push("ajaxPostLoad"),"3:4"===e.customizerFeedData.settings.playerratio&&t.push("narrowPlayer"),e.customizerFeedData.settings.disablecdn&&t.push("disablecdn"),t.toString()},shouldShowPlayer:function(){if("gallery"==this.customizerFeedData.settings.layout)return!0}},E(t,"shouldShowStandardHeader",(function(){return this.customizerFeedData.settings.showheader&&"standard"===this.customizerFeedData.settings.headerstyle})),E(t,"shouldShowTextHeader",(function(){return this.customizerFeedData.settings.showheader&&"text"===this.customizerFeedData.settings.headerstyle})),E(t,"switchToVideosSection",(function(){var e=this;e.customizerScreens.parentActiveSection=null,e.customizerScreens.parentActiveSectionData=null,e.customizerScreens.activeSection="customize_videos",e.customizerScreens.activeSectionData=e.customizerSidebarBuilder.customize.sections.customize_videos})),E(t,"setShortcodeGlobalSettings",(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this,n=jQuery("html").find(".sb_youtube"),o=t.jsonParse(n.attr("data-options")),s=t.customizerFeedData.settings;if(n.length){if("carousel"===s.layout){var i=t.valueIsEnabled(s.carouselarrows),r=t.valueIsEnabled(s.carouselpag),a=t.valueIsEnabled(s.carouselautoplay),c=!!a&&parseInt(s.carouseltime),l=!t.checkNotEmpty(s.carouselloop)||"rewind"===s.carouselloop,u=s.carouselrows?Math.min(parseInt(s.carouselrows),2):1;delete o.gallery,delete o.masonry,delete o.grid,o.carousel=[i,r,a,c,l,u]}else"grid"==s.layout?(delete o.gallery,delete o.masonry):"masonry"==s.layout?(delete o.gallery,delete o.grid):"gallery"==s.layout&&(delete o.masonry,delete o.grid);"carousel"!==s.layout&&delete o.carousel,n.attr("data-options",JSON.stringify(o)),void 0!==window.sby_init&&e&&window.sby_init()}})),E(t,"shouldShowPlayer",(function(){if("gallery"==this.customizerFeedData.settings.layout)return!0})),E(t,"showManualConnect",(function(){this.shouldShowManualConnect=!0,this.shouldShowFeedAPIBackBtn=!0})),E(t,"showFeedSourceManualConnect",(function(){this.viewsActive.accountAPIPopup=!0,this.shouldShowManualConnect=!0})),E(t,"showAPIConnectForm",(function(){this.shouldShowFeedAPIForm=!0,this.shouldShowFeedAPIBackBtn=!0})),E(t,"hideAPIConnectForm",(function(){var e=this;e.shouldShowManualConnect=!1,e.shouldShowFeedAPIForm=!1,e.shouldShowFeedAPIBackBtn=!1})),E(t,"addAPIKey",(function(){if((e=this).selectedFeedModel.apiKey){var e,t={action:"sby_add_api_key",api:(e=this).selectedFeedModel.apiKey};e.apiKeyBtnLoader=!0,e.ajaxPost(t,(function(t){t.data,e.apiKeyBtnLoader=!1,e.apiKeyError=!1,e.apiKeyStatus=!0,e.activateView("accountAPIPopup")}))}else e.apiKeyError=!0})),E(t,"addAccessToken",(function(){if((e=this).selectedFeedModel.accessToken){var e,t={action:"sby_manual_access_token",sby_access_token:(e=this).selectedFeedModel.accessToken};e.apiKeyBtnLoader=!0,e.ajaxPost(t,(function(t){t.data,e.apiKeyBtnLoader=!1,e.accessTokenError=!1,e.apiKeyStatus=!0,e.activateView("accountAPIPopup")}))}else e.accessTokenError=!0})),E(t,"submitNewFeed",(function(){var e=this,t={action:"sby_feed_saver_manager_builder_update",feedtype:e.selectedFeed,feedtemplate:e.selectedFeedTemplate,selectedFeedModel:e.selectedFeedModel,new_insert:"true"};e.fullScreenLoader=!0,e.ajaxPost(t,(function(t){var n=t.data;n.feed_id&&n.success&&(window.location=e.builderUrl+"&feed_id="+n.feed_id+e.sw_feed_params())}))})),t)),e(SB_Customizer)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,