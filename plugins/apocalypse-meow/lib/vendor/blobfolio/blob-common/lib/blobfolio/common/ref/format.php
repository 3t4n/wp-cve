<?php
 namespace blobfolio\wp\meow\vendor\common\ref; use \blobfolio\wp\meow\vendor\common\bc; use \blobfolio\wp\meow\vendor\common\constants; use \blobfolio\wp\meow\vendor\common\data; use \blobfolio\wp\meow\vendor\common\file as v_file; use \blobfolio\wp\meow\vendor\common\format as v_format; use \blobfolio\wp\meow\vendor\common\mb as v_mb; use \blobfolio\wp\meow\vendor\common\sanitize as v_sanitize; use \blobfolio\wp\meow\vendor\domain\domain; class format { public static function array_flatten(&$arr) { $out = array(); cast::array($arr); foreach ($arr as $v) { if (\is_array($v)) { static::array_flatten($v); foreach ($v as $v2) { $out[] = $v2; } } else { $out[] = $v; } } $arr = $out; } public static function array_to_indexed(&$arr) { cast::array($arr); if (\count($arr)) { $out = array(); foreach ($arr as $k=>$v) { $out[] = array( 'key'=>$k, 'value'=>$v, ); } $arr = $out; } } public static function ceil(&$num, int $precision=0) { if (\is_array($num)) { foreach ($num as $k=>$v) { static::ceil($num[$k], $precision); } } else { cast::float($num, true); sanitize::to_range($precision, 0); $precision = (10 ** $precision); $num = \ceil($num * $precision) / $precision; } } public static function decode_js_entities(&$str) { static::decode_unicode_entities($str); static::decode_escape_entities($str); } public static function decode_escape_entities(&$str) { cast::string($str, true); $replacements = array( '\b'=>\chr(0x08), '\f'=>\chr(0x0C), '\n'=>\chr(0x0A), '\r'=>\chr(0x0D), '\t'=>\chr(0x09), ); $str = \str_replace( \array_keys($replacements), \array_values($replacements), $str ); } public static function decode_unicode_entities(&$str) { cast::string($str, true); $last = ''; while ($str !== $last) { $last = $str; $str = \preg_replace_callback( '/\\\u([0-9A-Fa-f]{4})/u', array(static::class, 'decode_entities_hex'), $str ); cast::string($str, true); } } public static function decode_entities(&$str) { cast::string($str, true); $last = ''; while ($str !== $last) { $last = $str; $str = \html_entity_decode($str, \ENT_QUOTES, 'UTF-8'); $str = \preg_replace_callback('/&#([0-9]+);/', array(static::class, 'decode_entities_chr'), $str); $str = \preg_replace_callback('/&#[Xx]([0-9A-Fa-f]+);/', array(static::class, 'decode_entities_hex'), $str); cast::string($str, true); } } protected static function decode_entities_chr($matches) { return \chr($matches[1]); } protected static function decode_entities_hex($matches) { return \chr(\hexdec($matches[1])); } public static function floor(&$num, int $precision=0) { if (\is_array($num)) { foreach ($num as $k=>$v) { static::floor($num[$k], $precision); } } else { cast::float($num, true); sanitize::to_range($precision, 0); $precision = (10 ** $precision); $num = \floor($num * $precision) / $precision; } } public static function fraction(&$num, float $precision=0.0001) { if (\is_array($num)) { foreach ($num as $k=>$v) { static::fraction($num[$k], $precision); } } else { cast::float($num, true); if ($precision <= 0 || $precision >= 1) { $num = ''; return; } if (0.0 === $num) { $num = '0'; return; } $negative = $num < 0; $num = \abs($num); $numerator = 1; $h2 = $denominator = 0; $k2 = 1; $b = 1 / $num; do { $b = 1 / $b; $a = \floor($b); $aux = $numerator; $numerator = $a * $numerator + $h2; $h2 = $aux; $aux = $denominator; $denominator = $a * $denominator + $k2; $k2 = $aux; $b = $b - $a; } while (\abs($num - $numerator / $denominator) > $num * $precision); if (1.0 === $denominator) { $num = "$numerator"; } else { $num = "{$numerator}/{$denominator}"; } if ($negative) { $num = "-{$num}"; } } } public static function ip_to_number(&$ip) { if (! \is_string($ip)) { $ip = false; return false; } if (! \filter_var($ip, \FILTER_VALIDATE_IP)) { $ip = false; return false; } if (\filter_var($ip, \FILTER_VALIDATE_IP, \FILTER_FLAG_IPV4)) { $ip = \ip2long($ip); return true; } if (\filter_var($ip, \FILTER_VALIDATE_IP, \FILTER_FLAG_IPV6)) { try { $ip_n = \inet_pton($ip); $bin = ''; $length = \strlen($ip_n) - 1; for ($bit = $length; $bit >= 0; $bit--) { $bin = \sprintf('%08b', \ord($ip_n[$bit])) . $bin; } if (\function_exists('gmp_init')) { $ip = \gmp_strval(\gmp_init($bin, 2), 10); return true; } $ip = bc::bindec($bin); return true; } catch (\Throwable $e) { $ip = false; return false; } } $ip = false; return false; } public static function ip_to_subnet(&$ip) { sanitize::ip($ip, true, false); if (! $ip) { $ip = false; return false; } elseif (\filter_var($ip, \FILTER_VALIDATE_IP, \FILTER_FLAG_IPV4)) { $bits = \explode('.', $ip); $bits[3] = 0; $ip = \implode('.', $bits) . '/24'; } else { $bits = \explode(':', $ip); for ($x = 4; $x <= 7; ++$x) { $bits[$x] = 0; } $ip = v_sanitize::ip(\implode(':', $bits), true) . '/64'; } return true; } public static function json(&$str, $pretty=true) { if (! \is_string($str)) { static::json_encode($str); } if (false === ($decode = v_format::json_decode($str))) { $str = null; return false; } if ($pretty) { $str = \json_encode($decode, \JSON_PRETTY_PRINT); } else { $str = \json_encode($decode); } return true; } public static function json_decode(&$str) { cast::string($str, true); $str = \preg_replace( array( '#^\s*//(.+)$#m', '#^\s*/\*(.+)\*/#Us', '#/\*(.+)\*/\s*$#Us', ), '', $str ); mb::trim($str); if (! $str || ("''" === $str) || ('""' === $str)) { $str = ''; return true; } $tmp = \json_decode($str, true); if (null !== $tmp) { $str = $tmp; return true; } $lower = v_mb::strtolower($str, false); if ('true' === $lower || 'false' === $lower) { cast::bool($str, true); return true; } elseif ('null' === $lower) { $str = null; return true; } elseif (\is_numeric($lower)) { if (false !== \strpos($lower, '.')) { $str = (float) $lower; } else { $str = (int) $lower; } return true; } elseif (\preg_match('/^("|\')(.+)(\1)$/s', $str, $match) && ($match[1] === $match[3])) { $str = $match[2]; static::decode_js_entities($str); return true; } elseif (! \preg_match('/^\[.*\]$/s', $str) && ! \preg_match('/^\{.*\}$/s', $str)) { $str = null; return false; } $slices = array( array( 'type'=>'slice', 'from'=>0, 'delimiter'=>false, ), ); $out = array(); if (0 === \strpos($str, '[')) { $type = 'array'; } else { $type = 'object'; } $chunk = v_mb::substr($str, 1, -1); $length = v_mb::strlen($chunk); for ($x = 0; $x <= $length; ++$x) { $last = \end($slices); $subchunk = v_mb::substr($chunk, $x, 2); if ( ($x === $length) || ((',' === $chunk[$x]) && 'slice' === $last['type']) ) { $slice = v_mb::substr($chunk, $last['from'], ($x - $last['from'])); $slices[] = array( 'type'=>'slice', 'from'=>$x + 1, 'delimiter'=>false, ); if ('array' === $type) { $out[] = v_format::json_decode($slice); } else { if (\preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) { $key = v_format::json_decode($parts[1]); $val = v_format::json_decode($parts[2]); $out[$key] = $val; } elseif (\preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) { $key = $parts[1]; static::decode_js_entities($key); $val = v_format::json_decode($parts[2]); $out[$key] = $val; } } } elseif ( (('"' === $chunk[$x]) || ("'" === $chunk[$x])) && ('string' !== $last['type']) ) { $slices[] = array( 'type'=>'string', 'from'=>$x, 'delimiter'=>$chunk[$x], ); } elseif ( ($chunk[$x] === $last['delimiter']) && ('string' === $last['type']) && ( ('\\' !== $chunk[$x - 1]) || (('\\' === $chunk[$x - 1]) && ('\\' === $chunk[$x - 2])) ) ) { \array_pop($slices); } elseif ( ('[' === $chunk[$x]) && \in_array($last['type'], array('slice', 'array', 'object'), true) ) { $slices[] = array( 'type'=>'array', 'from'=>$x, 'delimiter'=>false, ); } elseif ( (']' === $chunk[$x]) && ('array' === $last['type']) ) { \array_pop($slices); } elseif ( ('{' === $chunk[$x]) && \in_array($last['type'], array('slice', 'array', 'object'), true) ) { $slices[] = array( 'type'=>'object', 'from'=>$x, 'delimiter'=>false, ); } elseif ( ('}' === $chunk[$x]) && ('object' === $last['type']) ) { \array_pop($slices); } elseif ( ('/*' === $subchunk) && \in_array($last['type'], array('slice', 'array', 'object'), true) ) { $slices[] = array( 'type'=>'comment', 'from'=>$x, 'delimiter'=>false, ); ++$x; } elseif ( ('*/' === $subchunk) && ('comment' === $last['type']) ) { \array_pop($slices); ++$x; for ($y = $last['from']; $y <= $x; ++$y) { $chunk[$y] = ' '; } } } $str = $out; return true; } public static function json_encode(&$value, $options=0, $depth=512) { if (! $value || \is_numeric($value) || \is_bool($value)) { $value = \json_encode($value, $options, $depth); return; } $original = $value; $value = \json_encode($value, $options, $depth); if (null === $value) { sanitize::utf8($original); $value = \json_encode($original, $options, $depth); } } public static function links(&$str, $args=null, int $pass=1) { cast::string($str, true); $defaults = array( 'class'=>array(), 'rel'=>'', 'target'=>'', ); $data = data::parse_args($args, $defaults); $data['class'] = \implode(' ', $data['class']); sanitize::html($data); $data = \array_filter($data, 'strlen'); $atts = array(); foreach ($data as $k=>$v) { $atts[] = "$k=\"$v\""; } $atts = \implode(' ', $atts); $str = \preg_split('/(<.+?>)/is', $str, 0, \PREG_SPLIT_DELIM_CAPTURE); $blacklist = \implode('|', constants::LINKS_BLACKLIST); $ignoring = false; foreach ($str as $k=>$v) { if (0 === $k % 2) { if (false !== $ignoring) { continue; } switch ($pass) { case 1: $str[$k] = \preg_replace_callback( '/((ht|f)tps?:\/\/[^\s\'"\[\]\(\){}]+|[^\s\'"\[\]\(\){}]*xn--[^\s\'"\[\]\(\){}]+|[@]?[\w\.]+\.[\w\.]{2,}[^\s]*)/ui', function($matches) use($atts) { $raw = $matches[1]; if (0 === \strpos($raw, '@')) { return $matches[1]; } if (\preg_match('/([^\w\/]+)$/ui', $raw, $suffix)) { $suffix = $suffix[1]; $raw = \preg_replace('/([^\w\/]+)$/ui', '', $raw); } else { $suffix = ''; } $link = v_mb::parse_url($raw); if (! \is_array($link) || ! isset($link['host'])) { return $matches[1]; } $domain = new domain($link['host']); if (! $domain->is_valid() || ! $domain->is_fqdn()) { return $matches[1]; } if (! isset($link['scheme'])) { $link['scheme'] = 'http'; } $link = v_file::unparse_url($link); if (\filter_var($link, \FILTER_SANITIZE_URL) !== $link) { return $matches[1]; } sanitize::html($link); return '<a href="' . $link . '"' . ($atts ? " $atts" : '') . '>' . $raw . '</a>' . $suffix; }, $str[$k] ); break; case 2: $str[$k] = \preg_replace_callback( '/([\w\.\!#\$%&\*\+\=\?_~]+@[^\s\'"\[\]\(\){}@]{2,})/ui', function($matches) use($atts) { $raw = $matches[1]; if (\preg_match('/([^\w]+)$/ui', $raw, $suffix)) { $suffix = $suffix[1]; $raw = \preg_replace('/([^\w]+)$/ui', '', $raw); } else { $suffix = ''; } $link = v_sanitize::email($raw); if (! $link) { return $matches[1]; } sanitize::html($link); return '<a href="mailto:' . $link . '"' . ($atts ? " $atts" : '') . '>' . $raw . '</a>' . $suffix; }, $str[$k] ); break; case 3: $str[$k] = \preg_replace_callback( '/(\s)?(\+\d[\d\-\s]{5,}+|\(\d{3}\)\s[\d]{3}[\-\.\s]\d{4}|\d{3}[\-\.\s]\d{3}[\-\.\s]\d{4}|\+\d{7,})/ui', function($matches) use($atts) { $prefix = $matches[1]; $raw = $matches[2]; if (\preg_match('/([^\d]+)$/ui', $raw, $suffix)) { $suffix = $suffix[1]; $raw = \preg_replace('/([^\d]+)$/ui', '', $raw); } else { $suffix = ''; } $link = v_format::phone($raw); $link = \preg_replace('/[^\d]/', '', $link); if (! $link) { return $matches[1] . $matches[2]; } return $prefix . '<a href="tel:+' . $link . '"' . ($atts ? " $atts" : '') . '>' . $raw . '</a>' . $suffix; }, $str[$k] ); break; } } else { if (false === $ignoring) { if (\preg_match("/<($blacklist).*(?<!\/)>$/is", $str[$k], $matches)) { $ignoring = \preg_quote($matches[1], '/'); } } elseif (\preg_match("/<\/\s*$ignoring>/i", $str[$k], $matches)) { $ignoring = false; } } } $str = \implode($str); if (1 === $pass) { static::links($str, $args, 2); } elseif (2 === $pass) { static::links($str, $args, 3); } } public static function list_to_array(&$list, $args=null) { $out = array(); if (\is_string($args)) { $args = array('delimiter'=>$args); } $args = data::parse_args($args, constants::LIST_TO_ARRAY); $args['cast'] = \strtolower($args['cast']); if ( ('array' === $args['cast']) || ! isset(constants::CAST_TYPES[$args['cast']]) ) { $args['cast'] = 'string'; } if ( (null !== $args['min']) && (null !== $args['max']) && $args['min'] > $args['max'] ) { data::switcheroo($args['min'], $args['max']); } cast::array($list); foreach ($list as $k=>$v) { if (\is_array($list[$k])) { static::list_to_array($list[$k], $args); } else { cast::string($list[$k], true); if ($args['delimiter']) { $list[$k] = \explode($args['delimiter'], $list[$k]); } else { $list[$k] = mb::str_split($list[$k], 1); } if ($args['trim']) { mb::trim($list[$k]); } $list[$k] = \array_filter($list[$k], 'strlen'); if ('string' !== $args['cast']) { cast::to_type($list[$k], $args['cast']); } } foreach ($list[$k] as $v2) { if ( ((null === $args['min']) || $v2 >= $args['min']) && ((null === $args['max']) || $v2 <= $args['max']) ) { $out[] = $v2; } } } if ($args['unique'] && \count($out)) { $out = \array_values(\array_unique($out)); } if ($args['sort'] && \count($out)) { \sort($out); } $list = $out; } public static function money(&$value=0, bool $cents=false, string $separator='', bool $no00=false) { if (\is_array($value)) { foreach ($value as $k=>$v) { static::money($value[$k], $cents, $separator, $no00); } } else { cast::float($value, true); $value = \round($value, 2); $negative = $value < 0; if ($negative) { $value = \abs($value); } if ($value >= 1 || false === $cents) { $value = ($negative ? '-' : '') . '$' . \number_format($value, 2, '.', $separator); if ($no00) { $value = \preg_replace('/\.00$/', '', $value); } } else { $value = ($negative ? '-' : '') . (100 * $value) . '¢'; } } } public static function number_to_ip(&$ip) { if (\is_int($ip)) { $ip = \long2ip($ip); sanitize::ip($ip, true); return; } if (! \is_string($ip)) { if (\is_numeric($ip)) { $ip = (string) $ip; } else { $ip = false; return false; } } if (! $ip || ('0' === $ip)) { $ip = false; return false; } if (\function_exists('gmp_init')) { $bin = \gmp_strval(\gmp_init($ip, 10), 2); $bin = \sprintf('%0128s', $bin); } else { $bin = bc::decbin($ip, 128); } $chunk = array(); for ($bit = 0; $bit <= 7; ++$bit) { $bin_part = \substr($bin, $bit * 16, 16); $chunk[] = \dechex(\bindec($bin_part)); } $ip = \implode(':', $chunk); $ip = \inet_ntop(\inet_pton($ip)); if (! $ip || '::' === $ip) { $ip = '0.0.0.0'; } sanitize::ip($ip, true); return true; } public static function phone(&$str, $country='', $types=array()) { if (\is_array($str)) { foreach ($str as $k=>$v) { static::phone($str[$k], $country, $types); } } else { if (! \is_string($str)) { if (\is_numeric($str)) { $str = (string) $str; } else { $str = ''; return false; } } sanitize::whitespace($str, 0); if (! $str) { $str = ''; return false; } if (! \is_string($country)) { $country = ''; } cast::array($types); if (\class_exists('blobfolio\\phone\\phone')) { $str = new phone($str, $country); if (! $str->is_phone($types)) { $str = ''; return false; } } else { $str = \preg_replace('/[^\d]/', '', $str); } $str = (string) $str; } return true; } public static function round(&$num, int $precision=0, int $mode=\PHP_ROUND_HALF_UP) { if (\is_array($num)) { foreach ($num as $k=>$v) { static::round($num[$k], $precision, $mode); } } else { cast::float($num, true); sanitize::to_range($precision, 0); $num = \round($num, $precision, $mode); } } public static function to_timezone(string &$date, $from='UTC', $to='UTC') { sanitize::datetime($date); if ('UTC' !== $from) { sanitize::timezone($from); } if ('UTC' !== $to) { sanitize::timezone($to); } if (('0000-00-00 00:00:00' === $date) || ($from === $to)) { return; } $original = $date; try { $date_new = new \DateTime($date, new \DateTimeZone($from)); $date_new->setTimezone(new \DateTimeZone($to)); $date = $date_new->format('Y-m-d H:i:s'); } catch (\Throwable $e) { $date = $original; } } } 