<?php
 namespace blobfolio\wp\meow\vendor\common; class bc { public static function bitwise(string $method, $left, $right='0', $bits=null) { $method = \strtoupper($method); if (isset(constants::BITWISE_OPERATORS[$method])) { $method = constants::BITWISE_OPERATORS[$method]; } if (! $method || ! \in_array($method, constants::BITWISE_OPERATORS, true)) { return '0'; } if (null === $bits) { $bits = \max(static::bit_size($left), static::bit_size($right)); } ref\cast::int($bits, true); ref\sanitize::to_range($bits, 0); if ('LEFT' === $method) { return \bcmul($left, \bcpow('2', $bits)); } elseif ('RIGHT' === $method) { return \bcdiv($left, \bcpow('2', $bits)); } $left = static::decbin($left); if ('NOT' === $method) { $right = '0'; } else { $right = static::decbin($right); } $length = \max(\strlen($left), \strlen($right), $bits); $left = \sprintf("%0{$length}s", $left); $right = \sprintf("%0{$length}s", $right); $out = ''; if ('AND' === $method) { for ($x = 0; $x < $length; ++$x) { $out .= (($left[$x] + 0) & ($right[$x] + 0)) ? '1' : '0'; } } elseif ('OR' === $method) { for ($x = 0; $x < $length; ++$x) { $out .= (($left[$x] + 0) | ($right[$x] + 0)) ? '1' : '0'; } } elseif ('XOR' === $method) { for ($x = 0; $x < $length; ++$x) { $out .= (($left[$x] + 0) ^ ($right[$x] + 0)) ? '1' : '0'; } } elseif ('NOT' === $method) { $out = \strtr($left, array('0'=>'1', '1'=>'0')); } if ($out) { return static::bindec($out); } return '0'; } protected static function bit_size($num) { ref\cast::string($num, true); $bits = 0; while ($num > 0) { $num = \bcdiv($num, '2', 0); $bits++; } return \ceil($bits / 4) * 4; } public static function bindec($bin) { ref\cast::string($bin, true); $dec = '0'; $length = \strlen($bin); for ($x = 0; $x < $length; ++$x) { $dec = \bcmul($dec, '2', 0); $dec = \bcadd($dec, $bin[$x], 0); } return $dec; } public static function binhex($bin) { return static::dechex(static::bindec($bin)); } public static function decbin($dec, int $length=0) { ref\cast::string($dec, true); ref\sanitize::to_range($length, 0); $bin = ''; while ($dec) { $m = \bcmod($dec, 2); $dec = \bcdiv($dec, 2, 0); $bin = \abs($m) . $bin; } if ($length) { return \sprintf("%0{$length}s", $bin); } return $bin ? $bin : '0'; } public static function dechex($dec) { $last = \bcmod($dec, 16); $remain = \bcdiv(\bcsub($dec, $last, 0), 16, 0); if ('0' === $remain) { return \dechex($last); } return static::dechex($remain) . \dechex($last); } public static function hexdec($hex) { ref\cast::string($hex, true); if (1 === \strlen($hex)) { return \hexdec($hex); } $remain = \substr($hex, 0, -1); $last = \substr($hex, -1); return \bcadd(\bcmul(16, static::hexdec($remain), 0), \hexdec($last), 0); } } 