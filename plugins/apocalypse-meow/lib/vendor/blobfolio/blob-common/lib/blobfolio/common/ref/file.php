<?php
 namespace blobfolio\wp\meow\vendor\common\ref; class file { public static function idn_to_ascii(&$url) { if (! \function_exists('idn_to_ascii')) { return false; } if (\is_array($url)) { foreach ($url as $k=>$v) { static::idn_to_ascii($url[$k]); } } else { if (\defined('INTL_IDNA_VARIANT_UTS46')) { $url = \idn_to_ascii($url, 0, \INTL_IDNA_VARIANT_UTS46); } else { $url = \idn_to_ascii($url); } } return true; } public static function idn_to_utf8(&$url) { if (! \function_exists('idn_to_utf8')) { return false; } if (\is_array($url)) { foreach ($url as $k=>$v) { static::idn_to_utf8($url[$k]); } } else { if (\defined('INTL_IDNA_VARIANT_UTS46')) { $url = \idn_to_utf8($url, 0, \INTL_IDNA_VARIANT_UTS46); } else { $url = \idn_to_utf8($url); } } return true; } public static function leadingslash(&$path) { if (\is_array($path)) { foreach ($path as $k=>$v) { static::leadingslash($path[$k]); } } else { cast::string($path, true); static::unleadingslash($path); $path = "/$path"; } } public static function path(&$path, bool $validate=true) { if (\is_array($path)) { foreach ($path as $k=>$v) { static::path($path[$k], $validate); } } else { cast::string($path, true); if (\preg_match('/^(https?|ftps?|sftp)/iu', $path)) { sanitize::url($path); return true; } if (0 === \strpos($path, 'file://')) { $path = \substr($path, 7); } static::unixslash($path); $original = $path; try { $path = @\realpath($path); } catch (\Throwable $e) { $path = false; } if ($validate && (false === $path)) { $path = false; return false; } elseif (false === $path) { try { $path = $original; if (false !== $dir = @\realpath(\dirname($path))) { static::trailingslash($dir); $path = $dir . \basename($path); } else { $path = $original; } } catch (\Throwable $e) { $path = $original; } } $original = $path; try { if (@\is_dir($path)) { static::trailingslash($path); } } catch (\Throwable $e) { $path = $original; } } return true; } public static function trailingslash(&$path) { if (\is_array($path)) { foreach ($path as $k=>$v) { static::trailingslash($path[$k]); } } else { cast::string($path, true); static::untrailingslash($path); $path .= '/'; } } public static function unixslash(&$path) { if (\is_array($path)) { foreach ($path as $k=>$v) { static::unixslash($path[$k]); } } else { cast::string($path, true); $path = \str_replace('\\', '/', $path); $path = \str_replace('/./', '//', $path); $path = \preg_replace('/\/{2,}/u', '/', $path); } } public static function unleadingslash(&$path) { if (\is_array($path)) { foreach ($path as $k=>$v) { static::unleadingslash($path[$k]); } } else { cast::string($path, true); static::unixslash($path); $path = \ltrim($path, '/'); } } public static function untrailingslash(&$path) { if (\is_array($path)) { foreach ($path as $k=>$v) { static::untrailingslash($path[$k]); } } else { cast::string($path, true); static::unixslash($path); $path = \rtrim($path, '/'); } } } 